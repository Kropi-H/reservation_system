#!/usr/bin/env python3
"""
Test skript pro macOS connection pool probl√©m
"""
import sys
import os
import platform
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

print(f"üñ•Ô∏è Testov√°n√≠ na: {platform.system()} {platform.release()}")

def test_macos_connection_pool():
    """Test connection poolu na macOS."""
    try:
        from models.connection_pool import get_pooled_connection, put_pooled_connection
        print("‚úÖ Connection pool import OK")
        
        # Test z√°kladn√≠ho p≈ôipojen√≠
        conn = get_pooled_connection()
        print("‚úÖ Z√≠sk√°n√≠ connection z poolu OK")
        
        # Test dotazu
        cur = conn.cursor()
        cur.execute("SELECT version()")
        version = cur.fetchone()[0]
        cur.close()
        print(f"‚úÖ Test dotazu OK: {version[:50]}...")
        
        # Vr√°tit p≈ôipojen√≠
        put_pooled_connection(conn)
        print("‚úÖ Vr√°cen√≠ connection do poolu OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Connection pool test selhal: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_macos_database_listener():
    """Test database listeneru na macOS."""
    try:
        from models.database_listener import DatabaseListener
        print("‚úÖ DatabaseListener import OK")
        
        # Test inicializace
        listener = DatabaseListener()
        print("‚úÖ DatabaseListener inicializace OK")
        
        # Test spu≈°tƒõn√≠ (kr√°tk√Ω test)
        listener.start_listening(['test_channel'])
        print("‚úÖ DatabaseListener spu≈°tƒõn√≠ OK")
        
        # Kr√°tk√° pauza pro test
        import time
        time.sleep(2)
        
        # Zastaven√≠
        listener.stop_listening()
        print("‚úÖ DatabaseListener zastaven√≠ OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå DatabaseListener test selhal: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_select_module():
    """Test select modulu - nyn√≠ jen informativn√≠."""
    try:
        import select
        print("‚úÖ Select module import OK")
        
        # Pozn√°mka: select.select() m√° probl√©my s pr√°zdn√Ωmi seznamy na Windows/macOS
        # Database listener nyn√≠ pou≈æ√≠v√° univerz√°ln√≠ polling metodu
        print("‚ÑπÔ∏è Select module dostupn√Ω, ale database listener pou≈æ√≠v√° polling metodu")
        
        return True  # V≈ædy vr√°t√≠me success, proto≈æe select u≈æ nepot≈ôebujeme
        
    except Exception as e:
        print(f"‚ö†Ô∏è Select module test: {e}")
        print("‚ÑπÔ∏è To je v po≈ô√°dku - database listener pou≈æ√≠v√° polling metodu")
        return True  # V≈ædy vr√°t√≠me success

if __name__ == "__main__":
    print("üß™ Spou≈°t√≠m macOS diagnostick√© testy...")
    
    if platform.system() == "Darwin":
        print("üçé macOS detekov√°n - spou≈°t√≠m v≈°echny testy")
    else:
        print(f"‚ö†Ô∏è Testy urƒçen√© pro macOS, ale bƒõ≈æ√≠ na {platform.system()}")
    
    print("\n1Ô∏è‚É£ Test select modulu:")
    select_ok = test_select_module()
    
    print("\n2Ô∏è‚É£ Test connection poolu:")
    pool_ok = test_macos_connection_pool()
    
    print("\n3Ô∏è‚É£ Test database listeneru:")
    listener_ok = test_macos_database_listener()
    
    print(f"\nüìä V√Ωsledky test≈Ø:")
    print(f"   Select module: {'‚úÖ' if select_ok else '‚ùå'}")
    print(f"   Connection pool: {'‚úÖ' if pool_ok else '‚ùå'}")
    print(f"   Database listener: {'‚úÖ' if listener_ok else '‚ùå'}")
    
    if all([select_ok, pool_ok, listener_ok]):
        print("\nüéâ V≈°echny testy pro≈°ly! macOS by mƒõl fungovat.")
    else:
        print("\n‚ö†Ô∏è Nƒõkter√© testy selhaly - zkontrolujte chyby v√Ω≈°e.")
