#!/usr/bin/env python3
"""
Utility pro spr√°vu s√≠≈•ov√Ωch datab√°zov√Ωch konfigurac√≠
Pou≈æit√≠: python network_config_manager.py
Server IP: 192.168.0.118
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import (
    get_network_database_configs, save_network_database_config,
    set_active_network_config, get_active_network_config_name,
    test_database_connection, test_all_network_configs,
    auto_detect_best_config, get_connection_info, create_default_configs
)

def show_menu():
    """Zobraz√≠ hlavn√≠ menu."""
    print("\n=== SPR√ÅVA S√ç≈§OV√ùCH DATAB√ÅZOV√ùCH KONFIGURAC√ç ===")
    print("PostgreSQL Server: 192.168.0.118")
    print("-" * 50)
    print("1. Zobrazit v≈°echny konfigurace")
    print("2. P≈ôidat novou konfiguraci")
    print("3. Testovat v≈°echny konfigurace")
    print("4. Nastavit aktivn√≠ konfiguraci")
    print("5. Automaticky naj√≠t nejlep≈°√≠ konfiguraci")
    print("6. Zobrazit aktu√°ln√≠ p≈ôipojen√≠")
    print("7. Odstranit konfiguraci")
    print("8. Vytvo≈ôit v√Ωchoz√≠ konfigurace")
    print("9. Test p≈ôipojen√≠ k serveru 192.168.0.118")
    print("0. Ukonƒçit")
    print("-" * 50)

def show_configurations():
    """Zobraz√≠ v≈°echny ulo≈æen√© konfigurace."""
    configs = get_network_database_configs()
    active_name = get_active_network_config_name()
    
    if not configs:
        print("‚ùå ≈Ω√°dn√© konfigurace nenalezeny")
        print("üí° Spus≈•te volbu 8 pro vytvo≈ôen√≠ v√Ωchoz√≠ch konfigurac√≠")
        return
    
    print("\nüìã Ulo≈æen√© konfigurace:")
    for name, config in configs.items():
        status = " (AKTIVN√ç)" if name == active_name else ""
        print(f"  ‚Ä¢ {name}{status}")
        print(f"    {config['user']}@{config['host']}:{config['port']}/{config['database']}")

def add_configuration():
    """P≈ôid√° novou s√≠≈•ovou konfiguraci."""
    print("\n‚ûï P≈ôid√°n√≠ nov√© konfigurace:")
    
    name = input("N√°zev konfigurace: ").strip()
    if not name:
        print("‚ùå N√°zev nesm√≠ b√Ωt pr√°zdn√Ω")
        return
    
    # Kontrola, zda konfigurace ji≈æ neexistuje
    configs = get_network_database_configs()
    if name in configs:
        overwrite = input(f"Konfigurace '{name}' ji≈æ existuje. P≈ôepsat? (y/N): ")
        if overwrite.lower() != 'y':
            return
    
    print("üí° Pro server 192.168.0.118 zadejte: 192.168.0.118")
    host = input("Server (IP adresa nebo hostname) [192.168.0.118]: ").strip()
    if not host:
        host = "192.168.0.118"
    
    try:
        port = int(input("Port (v√Ωchoz√≠ 5432): ") or "5432")
    except ValueError:
        print("‚ùå Port mus√≠ b√Ωt ƒç√≠slo")
        return
    
    database = input("N√°zev datab√°ze (v√Ωchoz√≠ 'veterina'): ").strip() or "veterina"
    user = input("U≈æivatelsk√© jm√©no (v√Ωchoz√≠ 'postgres'): ").strip() or "postgres"
    password = input("Heslo: ")
    
    config = {
        'host': host,
        'port': port,
        'database': database,
        'user': user,
        'password': password
    }
    
    # Test konfigurace
    print(f"\nüîç Testov√°n√≠ konfigurace '{name}'...")
    if test_database_connection(config):
        save_network_database_config(name, config)
        print(f"‚úÖ Konfigurace '{name}' byla ulo≈æena")
        
        # Nab√≠dka nastaven√≠ jako aktivn√≠
        set_active = input("Nastavit jako aktivn√≠ konfiguraci? (Y/n): ")
        if set_active.lower() != 'n':
            set_active_network_config(name)
            print(f"‚úÖ Konfigurace '{name}' je nyn√≠ aktivn√≠")
    else:
        save_anyway = input("P≈ôipojen√≠ selhalo. Ulo≈æit konfiguraci p≈ôesto? (y/N): ")
        if save_anyway.lower() == 'y':
            save_network_database_config(name, config)
            print(f"‚ö†Ô∏è Konfigurace '{name}' byla ulo≈æena (bez testov√°n√≠)")

def test_configurations():
    """Testuje v≈°echny konfigurace."""
    print("\nüîç Testov√°n√≠ v≈°ech konfigurac√≠...")
    results = test_all_network_configs()
    
    print("\nüìä V√Ωsledky:")
    working_configs = []
    for name, success in results.items():
        status = "‚úÖ Funkƒçn√≠" if success else "‚ùå Nefunkƒçn√≠"
        print(f"  {name}: {status}")
        if success:
            working_configs.append(name)
    
    if working_configs:
        print(f"\nüéâ Funkƒçn√≠ konfigurace: {', '.join(working_configs)}")
    else:
        print("\n‚ö†Ô∏è ≈Ω√°dn√° konfigurace nen√≠ funkƒçn√≠")
        print("üí° Zkontrolujte:")
        print("   ‚Ä¢ Je PostgreSQL server na 192.168.0.118 spu≈°tƒõn?")
        print("   ‚Ä¢ Je spr√°vnƒõ nakonfigurov√°n firewall?")
        print("   ‚Ä¢ M√°te spr√°vn√© p≈ôihla≈°ovac√≠ √∫daje?")

def set_active_configuration():
    """Nastav√≠ aktivn√≠ konfiguraci."""
    configs = get_network_database_configs()
    
    if not configs:
        print("‚ùå ≈Ω√°dn√© konfigurace nenalezeny")
        return
    
    print("\nüìã Dostupn√© konfigurace:")
    config_names = list(configs.keys())
    for i, name in enumerate(config_names, 1):
        config = configs[name]
        print(f"  {i}. {name} - {config['host']}:{config['port']}")
    
    try:
        choice = int(input("\nVyberte ƒç√≠slo konfigurace: ")) - 1
        if 0 <= choice < len(config_names):
            name = config_names[choice]
            if set_active_network_config(name):
                print(f"‚úÖ Konfigurace '{name}' je nyn√≠ aktivn√≠")
            else:
                print(f"‚ùå Chyba p≈ôi nastaven√≠ konfigurace '{name}'")
        else:
            print("‚ùå Neplatn√© ƒç√≠slo")
    except ValueError:
        print("‚ùå Zadejte platn√© ƒç√≠slo")

def auto_detect_configuration():
    """Automaticky najde nejlep≈°√≠ konfiguraci."""
    print("\nüîç Automatick√° detekce nejlep≈°√≠ konfigurace...")
    
    best_config = auto_detect_best_config()
    if best_config:
        set_active_network_config(best_config)
        print(f"‚úÖ Automaticky nastavena konfigurace: {best_config}")
    else:
        print("‚ùå ≈Ω√°dn√° funkƒçn√≠ konfigurace nenalezena")
        print("üí° Zkuste vytvo≈ôit v√Ωchoz√≠ konfigurace (volba 8)")

def show_current_connection():
    """Zobraz√≠ informace o aktu√°ln√≠m p≈ôipojen√≠."""
    print(f"\nüì° Aktu√°ln√≠ p≈ôipojen√≠: {get_connection_info()}")

def remove_configuration():
    """Odstran√≠ konfiguraci."""
    configs = get_network_database_configs()
    
    if not configs:
        print("‚ùå ≈Ω√°dn√© konfigurace nenalezeny")
        return
    
    print("\nüìã Dostupn√© konfigurace:")
    config_names = list(configs.keys())
    for i, name in enumerate(config_names, 1):
        print(f"  {i}. {name}")
    
    try:
        choice = int(input("\nVyberte ƒç√≠slo konfigurace k odstranƒõn√≠: ")) - 1
        if 0 <= choice < len(config_names):
            name = config_names[choice]
            
            confirm = input(f"Opravdu odstranit konfiguraci '{name}'? (y/N): ")
            if confirm.lower() == 'y':
                # Odstran√≠ konfiguraci z config.json
                from config import load_config, save_config
                config = load_config()
                if 'network_configs' in config and name in config['network_configs']:
                    del config['network_configs'][name]
                    
                    # Pokud byla aktivn√≠, odstran√≠ reference
                    if config.get('active_network_config') == name:
                        config['active_network_config'] = None
                    
                    save_config(config)
                    print(f"‚úÖ Konfigurace '{name}' byla odstranƒõna")
                else:
                    print(f"‚ùå Konfigurace '{name}' nenalezena")
        else:
            print("‚ùå Neplatn√© ƒç√≠slo")
    except ValueError:
        print("‚ùå Zadejte platn√© ƒç√≠slo")

def create_default_configurations():
    """Vytvo≈ô√≠ v√Ωchoz√≠ konfigurace."""
    print("\nüîß Vytv√°≈ôen√≠ v√Ωchoz√≠ch konfigurac√≠...")
    create_default_configs()

def test_server_connection():
    """Test p≈ôipojen√≠ k serveru 192.168.0.118."""
    print("\nüîç Test p≈ôipojen√≠ k serveru 192.168.0.118...")
    
    server_config = {
        'host': '192.168.0.118',
        'port': 5432,
        'database': 'veterina',
        'user': 'postgres',
        'password': input("Zadejte heslo pro postgres: ")
    }
    
    if test_database_connection(server_config):
        print("‚úÖ Server 192.168.0.118 je dostupn√Ω!")
        save_choice = input("Ulo≈æit tuto konfiguraci jako 'server'? (Y/n): ")
        if save_choice.lower() != 'n':
            save_network_database_config('server', server_config)
            set_active_network_config('server')
            print("‚úÖ Konfigurace 'server' byla ulo≈æena a nastavena jako aktivn√≠")
    else:
        print("‚ùå Server 192.168.0.118 nen√≠ dostupn√Ω")
        print("üí° Zkontrolujte s√≠≈•ov√© p≈ôipojen√≠ a nastaven√≠ PostgreSQL serveru")

def main():
    """Hlavn√≠ funkce."""
    print("üåê Network Database Configuration Manager")
    print("üóÑÔ∏è  PostgreSQL Server: 192.168.0.118")
    
    while True:
        show_menu()
        choice = input("Vyberte mo≈ænost: ").strip()
        
        if choice == '0':
            print("üëã Ukonƒçuji...")
            break
        elif choice == '1':
            show_configurations()
        elif choice == '2':
            add_configuration()
        elif choice == '3':
            test_configurations()
        elif choice == '4':
            set_active_configuration()
        elif choice == '5':
            auto_detect_configuration()
        elif choice == '6':
            show_current_connection()
        elif choice == '7':
            remove_configuration()
        elif choice == '8':
            create_default_configurations()
        elif choice == '9':
            test_server_connection()
        else:
            print("‚ùå Neplatn√° volba")

if __name__ == "__main__":
    main()
