import json
import os
import psycopg2
from typing import Dict, Any, Optional

CONFIG_FILE = "config.json"

def load_config():
    """Naƒçte konfiguraci z config.json souboru."""
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (json.JSONDecodeError, FileNotFoundError):
            pass
    return {}

def save_config(config):
    """Ulo≈æ√≠ konfiguraci do config.json souboru."""
    try:
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
    except Exception as e:
        print(f"Nepoda≈ôilo se ulo≈æit konfiguraci: {e}")

# === POSTGRESQL KONFIGURACE ===

def get_database_config() -> Optional[Dict[str, Any]]:
    """Vr√°t√≠ PostgreSQL datab√°zovou konfiguraci."""
    config = load_config()
    return config.get('database_config')

def save_database_config(db_config: Dict[str, Any]):
    """Ulo≈æ√≠ PostgreSQL datab√°zovou konfiguraci."""
    config = load_config()
    config['database_config'] = db_config
    config['database_type'] = 'postgresql'
    save_config(config)

def get_database_type() -> str:
    """Vr√°t√≠ typ datab√°ze - v≈ædy postgresql."""
    return 'postgresql'

def set_database_type(db_type: str):
    """Nastav√≠ typ datab√°ze - pouze postgresql je povolen√Ω."""
    if db_type != 'postgresql':
        raise ValueError("Pouze PostgreSQL datab√°ze je podporov√°na!")
    config = load_config()
    config['database_type'] = 'postgresql'
    save_config(config)

# === S√ç≈§OV√Å KONFIGURACE ===

def get_network_database_configs() -> Dict[str, Dict[str, Any]]:
    """Vr√°t√≠ ulo≈æen√© s√≠≈•ov√© konfigurace datab√°z√≠."""
    config = load_config()
    return config.get('network_configs', {})

def save_network_database_config(name: str, db_config: Dict[str, Any]):
    """Ulo≈æ√≠ pojmenovanou s√≠≈•ovou konfiguraci."""
    config = load_config()
    if 'network_configs' not in config:
        config['network_configs'] = {}
    config['network_configs'][name] = db_config
    save_config(config)

def set_active_network_config(name: str):
    """Nastav√≠ aktivn√≠ s√≠≈•ovou konfiguraci."""
    network_configs = get_network_database_configs()
    if name in network_configs:
        save_database_config(network_configs[name])
        config = load_config()
        config['active_network_config'] = name
        save_config(config)
        return True
    return False

def get_active_network_config_name() -> Optional[str]:
    """Vr√°t√≠ n√°zev aktivn√≠ s√≠≈•ov√© konfigurace."""
    config = load_config()
    return config.get('active_network_config')

# === TESTOV√ÅN√ç P≈òIPOJEN√ç ===

def test_database_connection(db_config: Optional[Dict[str, Any]] = None) -> bool:
    """Testuje p≈ôipojen√≠ k PostgreSQL datab√°zi."""
    if db_config is None:
        db_config = get_database_config()
    
    if not db_config:
        print("‚ùå ≈Ω√°dn√° datab√°zov√° konfigurace nenalezena")
        return False
    
    try:
        print(f"üîç Testov√°n√≠ p≈ôipojen√≠ k {db_config['host']}:{db_config['port']}")
        conn = psycopg2.connect(
            host=db_config['host'],
            port=db_config['port'],
            database=db_config['database'],
            user=db_config['user'],
            password=db_config['password'],
            connect_timeout=5
        )
        
        # Test z√°kladn√≠ho dotazu
        cursor = conn.cursor()
        cursor.execute("SELECT version()")
        version = cursor.fetchone()[0]
        cursor.close()
        conn.close()
        
        print(f"‚úÖ P≈ôipojen√≠ √∫spƒõ≈°n√©: {version[:50]}...")
        return True
        
    except psycopg2.OperationalError as e:
        error_msg = str(e)
        print(f"‚ùå P≈ôipojen√≠ selhalo: {error_msg}")
        
        if "could not connect to server" in error_msg:
            print("üí° Zkontrolujte:")
            print("   ‚Ä¢ Je PostgreSQL server spu≈°tƒõn?")
            print("   ‚Ä¢ Je spr√°vnƒõ nakonfigurov√°n firewall?")
            print("   ‚Ä¢ Je listen_addresses = '*' v postgresql.conf?")
        elif "authentication failed" in error_msg:
            print("üí° Zkontrolujte u≈æivatelsk√© jm√©no a heslo")
        elif "database" in error_msg and "does not exist" in error_msg:
            print(f"üí° Datab√°ze '{db_config['database']}' neexistuje")
        
        return False
    except Exception as e:
        print(f"‚ùå Neoƒçek√°van√° chyba: {e}")
        return False

def test_all_network_configs() -> Dict[str, bool]:
    """Testuje v≈°echny ulo≈æen√© s√≠≈•ov√© konfigurace."""
    network_configs = get_network_database_configs()
    results = {}
    
    print("=== TESTOV√ÅN√ç V≈†ECH S√ç≈§OV√ùCH KONFIGURAC√ç ===")
    
    for name, config in network_configs.items():
        print(f"\nüîç Testov√°n√≠ konfigurace '{name}':")
        results[name] = test_database_connection(config)
    
    return results

def get_best_database_config():
    """Vr√°t√≠ nejlep≈°√≠ dostupnou PostgreSQL datab√°zovou konfiguraci."""
    # Zkus√≠me aktu√°ln√≠ konfiguraci
    current_config = get_database_config()
    if current_config and test_database_connection(current_config):
        return current_config, "current"
    
    # Zkus√≠me s√≠≈•ov√© konfigurace
    network_configs = get_network_database_configs()
    for name, config in network_configs.items():
        if test_database_connection(config):
            print(f"‚úÖ Pou≈æ√≠v√°m konfiguraci '{name}'")
            return config, name
    
    # Pokud nic nefunguje, vyhod√≠me chybu
    if current_config:
        raise Exception(f"PostgreSQL datab√°ze nen√≠ dostupn√° na {current_config['host']}!")
    else:
        raise Exception("≈Ω√°dn√° PostgreSQL konfigurace nen√≠ dostupn√°!")

def auto_detect_best_config() -> Optional[str]:
    """Automaticky detekuje nejlep≈°√≠ dostupnou konfiguraci."""
    network_configs = get_network_database_configs()
    
    # Nejd≈ô√≠ve zkus√≠me localhost
    if 'localhost' in network_configs:
        if test_database_connection(network_configs['localhost']):
            print("‚úÖ Localhost PostgreSQL je dostupn√Ω")
            return 'localhost'
    
    # Pak zkus√≠me server
    if 'server' in network_configs:
        if test_database_connection(network_configs['server']):
            print("‚úÖ S√≠≈•ov√Ω server PostgreSQL je dostupn√Ω")
            return 'server'
    
    # Zkus√≠me ostatn√≠ konfigurace
    for name, config in network_configs.items():
        if name not in ['localhost', 'server']:
            if test_database_connection(config):
                print(f"‚úÖ Konfigurace '{name}' je dostupn√°")
                return name
    
    return None

# === UTILITY FUNKCE ===

def create_default_configs():
    """Vytvo≈ô√≠ v√Ωchoz√≠ s√≠≈•ov√© konfigurace s IP 192.168.0.118."""
    default_configs = {
        'localhost': {
            'host': 'localhost',
            'port': 5432,
            'database': 'veterina',
            'user': 'postgres',
            'password': 'motodevka25'
        },
        'server': {
            'host': '192.168.0.118',
            'port': 5432,
            'database': 'veterina',
            'user': 'postgres',
            'password': 'motodevka25'
        }
    }
    
    for name, config in default_configs.items():
        save_network_database_config(name, config)
    
    print("‚úÖ V√Ωchoz√≠ s√≠≈•ov√© konfigurace vytvo≈ôeny pro server 192.168.0.118")

def ensure_database_config():
    """Zajist√≠, ≈æe existuje PostgreSQL datab√°zov√° konfigurace."""
    db_config = get_database_config()
    
    if not db_config:
        print("‚ö†Ô∏è ≈Ω√°dn√° datab√°zov√° konfigurace nenalezena")
        
        # Vytvo≈ô√≠ v√Ωchoz√≠ konfigurace pokud neexistuj√≠
        network_configs = get_network_database_configs()
        if not network_configs:
            create_default_configs()
        
        # Pokus√≠ se naj√≠t funkƒçn√≠ konfiguraci
        best_config = auto_detect_best_config()
        if best_config:
            set_active_network_config(best_config)
            return get_database_config()
        else:
            # Fallback na server 192.168.0.118
            default_config = {
                "host": "192.168.0.118",
                "port": 5432,
                "database": "veterina",
                "user": "postgres",
                "password": "motodevka25"
            }
            print("üìù Nastavujem v√Ωchoz√≠ konfiguraci pro server 192.168.0.118")
            save_database_config(default_config)
            return default_config
    
    return db_config

def get_connection_info() -> str:
    """Vr√°t√≠ informace o p≈ôipojen√≠ k PostgreSQL datab√°zi."""
    config = get_database_config()
    if config:
        active_name = get_active_network_config_name()
        prefix = f"[{active_name}] " if active_name else ""
        return f"{prefix}PostgreSQL: {config['user']}@{config['host']}:{config['port']}/{config['database']}"
    return "PostgreSQL: Nen√≠ nakonfigurov√°no"

# === ZPƒöTN√Å KOMPATIBILITA ===

def get_last_directory():
    """Vr√°t√≠ posledn√≠ pou≈æitou slo≈æku."""
    config = load_config()
    return config.get('last_directory', os.path.expanduser('~'))

def get_database_path_from_config():
    """Vr√°t√≠ cestu k datab√°zi z konfigurace (pro SQLite) - deprecated."""
    config = load_config()
    return config.get('database_path', '')

def save_database_path_to_config(path):
    """Ulo≈æ√≠ cestu k datab√°zi do konfigurace (pro SQLite) - deprecated."""
    config = load_config()
    config['database_path'] = path
    config['database_type'] = 'sqlite'
    config['last_directory'] = os.path.dirname(path)
    save_config(config)

# === INICIALIZACE ===

def initialize_config():
    """Inicializuje PostgreSQL konfiguraci p≈ôi prvn√≠m spu≈°tƒõn√≠."""
    if not os.path.exists(CONFIG_FILE):
        print("üìù Vytv√°≈ô√≠m nov√Ω konfiguraƒçn√≠ soubor pro PostgreSQL...")
        
        # V√Ωchoz√≠ konfigurace s IP 192.168.0.118
        default_config = {
            "database_type": "postgresql",
            "database_config": {
                "host": "192.168.0.118",
                "port": 5432,
                "database": "veterina",
                "user": "postgres",
                "password": "motodevka25"
            },
            "network_configs": {
                "localhost": {
                    "host": "localhost",
                    "port": 5432,
                    "database": "veterina",
                    "user": "postgres",
                    "password": "motodevka25"
                },
                "server": {
                    "host": "192.168.0.118",
                    "port": 5432,
                    "database": "veterina",
                    "user": "postgres",
                    "password": "motodevka25"
                }
            },
            "active_network_config": "server"
        }
        save_config(default_config)
        print("‚úÖ PostgreSQL konfiguraƒçn√≠ soubor vytvo≈ôen s IP 192.168.0.118")

# Spust√≠ se p≈ôi importu - v≈ædy PostgreSQL
if not os.path.exists(CONFIG_FILE):
    initialize_config()
