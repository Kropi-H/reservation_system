#!/usr/bin/env python3
"""
Database listener pro real-time notifikace zmƒõn v PostgreSQL datab√°zi
"""
import json
import threading
import platform
from datetime import datetime

from PySide6.QtCore import QObject, Signal
from models.connection_pool import get_pooled_connection, put_pooled_connection

# Detekce OS pro specifick√© nastaven√≠
CURRENT_OS = platform.system()
print(f"üñ•Ô∏è Database listener bƒõ≈æ√≠ na: {CURRENT_OS}")


class DatabaseListener(QObject):
    """T≈ô√≠da pro poslouch√°n√≠ database notifikac√≠ p≈ôes PostgreSQL NOTIFY/LISTEN."""
    
    # Sign√°ly pro r≈Øzn√© typy zmƒõn
    reservation_changed = Signal(dict)
    doctor_changed = Signal(dict)
    ordinace_changed = Signal(dict)
    
    def __init__(self):
        super().__init__()
        self.connection = None
        self.listener_thread = None
        self.listening = False
    
    def start_listening(self, channels):
        """Spust√≠ poslouch√°n√≠ na zadan√Ωch kan√°lech."""
        try:
            self.connection = get_pooled_connection()
            
            # Nastav autocommit pro LISTEN/NOTIFY
            self.connection.autocommit = True
            cur = self.connection.cursor()
            
            # Registruj se na v≈°echny kan√°ly
            for channel in channels:
                cur.execute(f"LISTEN {channel}")
                print(f"üì° Poslouch√°m kan√°l: {channel} ({CURRENT_OS})")
            
            self.listening = True
            
            # Spus≈• listener thread s univerz√°ln√≠m polling
            print(f"üîÑ Pou≈æit√≠ polling metody pro {CURRENT_OS} (kompatibiln√≠ se v≈°emi platformami)")
                
            self.listener_thread = threading.Thread(target=self._listen_loop, daemon=True)
            self.listener_thread.start()
            
        except Exception as e:
            print(f"‚ö†Ô∏è Chyba p≈ôi spu≈°tƒõn√≠ database listeneru ({CURRENT_OS}): {e}")
            # Zkus√≠me fallback metodu pro v≈°echny platformy
            try:
                print(f"üîÑ {CURRENT_OS}: Zkou≈°√≠m fallback metodu bez connection pool...")
                self._start_listening_fallback(channels)
            except Exception as fallback_error:
                print(f"‚ùå {CURRENT_OS} fallback tak√© selhal: {fallback_error}")
            
    def _start_listening_fallback(self, channels):
        """Fallback metoda pro v≈°echny platformy - p≈ô√≠m√© p≈ôipojen√≠ bez poolu."""
        from config import get_database_config
        import psycopg2
        
        config = get_database_config()
        self.connection = psycopg2.connect(**config)
        self.connection.autocommit = True
        
        cur = self.connection.cursor()
        for channel in channels:
            cur.execute(f"LISTEN {channel}")
            print(f"üì° Fallback poslouch√°m kan√°l: {channel} ({CURRENT_OS})")
        
        self.listening = True
        self.listener_thread = threading.Thread(target=self._listen_loop, daemon=True)
        self.listener_thread.start()
    
    def _listen_loop(self):
        """Hlavn√≠ smyƒçka pro poslouch√°n√≠ notifikac√≠."""
        retry_count = 0
        max_retries = 5
        
        while self.listening:
            try:
                # Zkontroluj p≈ôipojen√≠ p≈ôed pou≈æit√≠m
                if not self.connection or self.connection.closed:
                    print(f"üîÑ P≈ôipojen√≠ uzav≈ôeno, obnovujem... ({CURRENT_OS})")
                    self._reconnect()
                    retry_count = 0  # Reset poƒç√≠tadla p≈ôi √∫spƒõ≈°n√©m p≈ôipojen√≠
                
                # Univerz√°ln√≠ ≈ôe≈°en√≠ - pou≈æij polling pro v≈°echny platformy
                import time
                time.sleep(0.1)  # Kr√°tk√° pauza (100ms)
                
                # Zkus polling s kontrolou stavu p≈ôipojen√≠
                if self.connection and not self.connection.closed:
                    self.connection.poll()
                    
                    # Zpracuj v≈°echny dostupn√© notifikace
                    while self.connection.notifies:
                        notify = self.connection.notifies.pop(0)
                        self._handle_notification(notify.channel, notify.payload)
                else:
                    print(f"‚ö†Ô∏è P≈ôipojen√≠ je uzav≈ôeno, pokou≈°√≠m se obnovit...")
                    continue
                    
            except Exception as e:
                retry_count += 1
                print(f"‚ö†Ô∏è Chyba v database listener loop ({CURRENT_OS}) - pokus {retry_count}/{max_retries}: {e}")
                
                # Pokud je p≈ô√≠li≈° mnoho chyb, zastav√≠me listener
                if retry_count >= max_retries:
                    print(f"‚ùå P≈ô√≠li≈° mnoho chyb, zastavujem database listener")
                    self.listening = False
                    break
                
                # Vyƒçkej p≈ôed dal≈°√≠m pokusem
                import time
                time.sleep(min(retry_count * 2, 10))  # Exponenci√°ln√≠ backoff, max 10s
                
                # Pokus o obnoven√≠ p≈ôipojen√≠
                try:
                    self._reconnect()
                except Exception as reconnect_error:
                    print(f"‚ö†Ô∏è Nepoda≈ôilo se obnovit p≈ôipojen√≠: {reconnect_error}")
                    continue
                    
        print(f"üõë Database listener ukonƒçen ({CURRENT_OS})")
    
    def _reconnect(self):
        """Obnoven√≠ p≈ôipojen√≠ k datab√°zi."""
        # Zav≈ôi star√© p≈ôipojen√≠
        if self.connection:
            try:
                self.connection.close()
            except:
                pass
            self.connection = None
        
        # Vytvo≈ô nov√© p≈ôipojen√≠
        try:
            # Nejprve zkus connection pool
            self.connection = get_pooled_connection()
            print(f"üîÑ Nov√© p≈ôipojen√≠ z poolu vytvo≈ôeno ({CURRENT_OS})")
        except Exception as pool_error:
            print(f"‚ö†Ô∏è Pool p≈ôipojen√≠ nedostupn√Ω: {pool_error}")
            # Fallback na p≈ô√≠m√© p≈ôipojen√≠
            try:
                from config import get_database_config
                import psycopg2
                
                config = get_database_config()
                self.connection = psycopg2.connect(**config)
                print(f"üîÑ Fallback p≈ôipojen√≠ vytvo≈ôeno ({CURRENT_OS})")
            except Exception as direct_error:
                print(f"‚ùå Nepoda≈ôilo se vytvo≈ôit ani fallback p≈ôipojen√≠: {direct_error}")
                raise
        
        # Nastav autocommit a obnovit LISTEN
        if self.connection:
            self.connection.autocommit = True
            cur = self.connection.cursor()
            
            # Znovu se registruj na v≈°echny kan√°ly
            channels = ['reservation_changes', 'doctor_changes', 'ordinace_changes']
            for channel in channels:
                cur.execute(f"LISTEN {channel}")
                print(f"üì° Obnoveno poslouch√°n√≠ kan√°lu: {channel} ({CURRENT_OS})")
    
    def _handle_notification(self, channel, payload):
        """Zpracuje notifikaci z datab√°ze."""
        try:
            data = json.loads(payload)
            print(f"üì® Notifikace p≈ôijata: {channel} - {data}")
            
            # Roze≈°li na spr√°vn√Ω sign√°l podle kan√°lu
            if channel == 'reservation_changes':
                self.reservation_changed.emit(data)
            elif channel == 'doctor_changes':
                self.doctor_changed.emit(data)
            elif channel == 'ordinace_changes':
                self.ordinace_changed.emit(data)
                
        except Exception as e:
            print(f"‚ö†Ô∏è Chyba p≈ôi zpracov√°n√≠ notifikace: {e}")
    
    def stop_listening(self):
        """Zastav√≠ poslouch√°n√≠ notifikac√≠."""
        print(f"üõë Zastavujem database listener ({CURRENT_OS})")
        self.listening = False
        
        if self.listener_thread and self.listener_thread.is_alive():
            self.listener_thread.join(timeout=5)  # Del≈°√≠ timeout
            if self.listener_thread.is_alive():
                print(f"‚ö†Ô∏è Listener thread se nepoda≈ôilo ukonƒçit v ƒçasov√©m limitu")
        
        if self.connection:
            try:
                # Pokus o graceful ukonƒçen√≠
                if not self.connection.closed:
                    cur = self.connection.cursor()
                    cur.execute("UNLISTEN *")  # Odregistruj v≈°echny kan√°ly
                    cur.close()
                    
                # Zav≈ôi p≈ôipojen√≠
                self.connection.close()
                print(f"‚úÖ Database listener p≈ôipojen√≠ uzav≈ôeno ({CURRENT_OS})")
            except Exception as e:
                print(f"‚ö†Ô∏è Chyba p≈ôi zav√≠r√°n√≠ p≈ôipojen√≠: {e}")
            finally:
                self.connection = None


def notify_database_change(table_type, operation, data):
    """
    Po≈°le notifikaci o zmƒõnƒõ v datab√°zi
    table_type: 'reservation', 'doctor', 'ordinace', etc.
    operation: 'INSERT', 'UPDATE', 'DELETE', 'DEACTIVATE'
    data: slovn√≠k s daty zmƒõny
    """
    try:
        # Pokus o pou≈æit√≠ connection poolu
        conn = get_pooled_connection()
        cur = conn.cursor()
        
        # Vytvo≈ô JSON payload
        payload = {
            'table': table_type,
            'operation': operation,
            'data': data,
            'timestamp': datetime.now().isoformat()
        }
        
        # Po≈°li notifikaci p≈ôes PostgreSQL NOTIFY na spr√°vn√Ω kan√°l
        if table_type == 'reservation':
            cur.execute("NOTIFY reservation_changes, %s", (json.dumps(payload),))
        elif table_type == 'doctor':
            cur.execute("NOTIFY doctor_changes, %s", (json.dumps(payload),))
        elif table_type == 'ordinace':
            cur.execute("NOTIFY ordinace_changes, %s", (json.dumps(payload),))
        
        conn.commit()
        cur.close()
        put_pooled_connection(conn)
        print(f"üì° Notifikace odesl√°na: {table_type} {operation}")
        
    except Exception as e:
        if "pool exhausted" in str(e).lower():
            print(f"‚ö†Ô∏è Connection pool vyƒçerp√°n, zkou≈°√≠m p≈ô√≠m√© p≈ôipojen√≠...")
            # Fallback: p≈ô√≠m√© p≈ôipojen√≠ bez poolu
            try:
                _notify_database_change_fallback(table_type, operation, data)
            except Exception as fallback_error:
                print(f"‚ùå Fallback notifikace selhala: {fallback_error}")
        else:
            print(f"‚ö†Ô∏è Chyba p≈ôi odes√≠l√°n√≠ notifikace: {e}")

def _notify_database_change_fallback(table_type, operation, data):
    """Fallback metoda pro notifikace bez connection poolu."""
    from config import get_database_config
    import psycopg2
    
    config = get_database_config()
    conn = psycopg2.connect(**config)
    
    try:
        cur = conn.cursor()
        
        payload = {
            'table': table_type,
            'operation': operation,
            'data': data,
            'timestamp': datetime.now().isoformat()
        }
        
        if table_type == 'reservation':
            cur.execute("NOTIFY reservation_changes, %s", (json.dumps(payload),))
        elif table_type == 'doctor':
            cur.execute("NOTIFY doctor_changes, %s", (json.dumps(payload),))
        elif table_type == 'ordinace':
            cur.execute("NOTIFY ordinace_changes, %s", (json.dumps(payload),))
        
        conn.commit()
        print(f"üì° Fallback notifikace odesl√°na: {table_type} {operation}")
        
    finally:
        conn.close()
