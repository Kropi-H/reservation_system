import re
from PySide6.QtWidgets import (QWidget, QVBoxLayout, QPushButton, QLabel, 
                               QDateEdit, QHBoxLayout, QTableWidget, QApplication, QMessageBox,
                               QTableWidgetItem, QMenuBar, QMenu, QMainWindow, QAbstractItemView,
                               QSystemTrayIcon, QCheckBox, QInputDialog, QTabWidget)
from PySide6.QtCore import QDate, QLocale, QTimer, Qt
from PySide6.QtGui import QColor, QPixmap, QAction, QFont, QIcon, QShortcut, QKeySequence
from views.formular_rezervace import FormularRezervace
from models.rezervace import ziskej_rezervace_dne
from datetime import datetime, timedelta
from models.ordinace import get_all_ordinace
from models.doktori import uloz_nebo_uprav_ordinacni_cas, ziskej_rozvrh_doktoru_dne, get_all_doctors_colors, get_doktor_isactive_by_color, uprav_ordinacni_cas
from views.login_dialog import LoginDialog
from controllers.data import table_grey_strip, vaccination_color, pause_color
# from controllers.rezervace_controller import uloz_rezervaci
from models.databaze import get_doktori, set_database_path, inicializuj_databazi
from config import test_database_connection
from views.vyber_doktora_dialog import VyberDoktoraDialog
from views.planovani_ordinaci_dialog import PlanovaniOrdinaciDialog
from views.users_dialog import UsersDialog
from views.doctors_dialog import DoctorDialog
from views.ordinace_dialog import OrdinaceDialog
from views.database_setup_dialog import DatabaseSetupDialog
from views.postgresql_setup_dialog import PostgreSQLSetupDialog
from views.smaz_rezervace_po_xy_dialog import SmazRezervaceDialog
from views.chat_config_dialog import ChatConfigDialog
from functools import partial
from controllers.data import basic_style
import os
from models.rezervace import smaz_rezervace_starsi_nez
from models.settings import get_settings
from chat.chat_widget import ChatWidget
import json  # P≈ôidejte tento import

# Smaz√°n√≠ rezervac√≠ star≈°√≠ch ne≈æ nastaven√Ω poƒçet dn√≠
smaz_rezervace_starsi_nez(get_settings("days_to_keep"))


def get_ordinace_list():
    """Optimalizovan√° funkce pro z√≠sk√°n√≠ seznamu n√°zv≈Ø ordinac√≠."""
    from models.databaze import get_connection
    with get_connection() as conn:
        cur = conn.cursor()
        cur.execute('SELECT DISTINCT nazev FROM Ordinace ORDER BY nazev')
        return [row[0] for row in cur.fetchall()]

class HlavniOkno(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Veterin√°rn√≠ rezervaƒçn√≠ syst√©m")
        # Nastaven√≠ ikony aplikace a okna
        self.setup_icons()
        layout = QVBoxLayout()    
        self.logged_in_user = None
        self.logged_in_user_role = None
        
        # Flag pro detekci aktivn√≠ho pl√°nov√°n√≠ ordinaƒçn√≠ch ƒças≈Ø
        self.is_planning_active = False
        
        # Inicializace pro p≈ô√≠padn√© budouc√≠ roz≈°√≠≈ôen√≠
        # Real-time synchronizace moment√°lnƒõ zak√°z√°na kv≈Øli stabilitƒõ
        
        self.logo_layout = QHBoxLayout()
        self.add_logo()
        
        horni_radek = QHBoxLayout()
        self.doktori_layout = QHBoxLayout()
        self.aktualizuj_doktori_layout()
        
        horni_radek.addLayout(self.logo_layout)
        horni_radek.addLayout(self.doktori_layout)
        
        app = QApplication.instance()
        if app:
           # Nastaven√≠ del≈°√≠ho timeoutu pro tooltips - BEZ glob√°ln√≠ho stylingu
           try:
               from PySide6.QtWidgets import QToolTip
               
               # Pouze pokus o nastaven√≠ timeoutu - bez CSS
               app.setProperty("toolTipTimeout", 15000)
               
               # Alternativn√≠ metody pro timeout
               if hasattr(QToolTip, 'setHideDelay'):
                   QToolTip.setHideDelay(15000)  # 15 sekund
               if hasattr(QToolTip, 'setShowDelay'):
                   QToolTip.setShowDelay(1500)    # 0.5 sekundy
                   
           except Exception as e:
               print(f"Tooltip configuration error: {e}")
                
         
        # --- MENU BAR ---
        import platform
        current_os = platform.system()
        print(f"üñ•Ô∏è Detekovan√Ω OS: {current_os}")
        
        self.menu_bar = QMenuBar(self)
        
        # macOS specifick√© nastaven√≠
        if current_os == "Darwin":  # macOS
            print("üçé Konfiguruji menu pro macOS...")
            # Na macOS se menu automaticky p≈ôesouv√° do syst√©mov√©ho menu baru
            self.menu_bar.setNativeMenuBar(True)
            
            # Pro macOS mus√≠me vytvo≈ôit menu trochu jinak
            # Nejprve vytvo≈ôme hlavn√≠ aplikaƒçn√≠ akci
            self.login_action = QAction("P≈ôihl√°≈°en√≠", self)
            self.login_action.triggered.connect(self.show_login_dialog)
            
            # Vytvo≈ô√≠me menu "ReservationSystem" 
            app_menu = self.menu_bar.addMenu("ReservationSystem")
            app_menu.addAction(self.login_action)
            
            # P≈ôid√°me separator a Quit akci pro spr√°vn√© macOS chov√°n√≠
            app_menu.addSeparator()
            quit_action = QAction("Ukonƒçit ReservationSystem", self)
            quit_action.setShortcut("Cmd+Q")
            quit_action.triggered.connect(self.close)
            app_menu.addAction(quit_action)
            
            # Vytvo≈ô√≠me tak√© Edit menu pro konzistenci s macOS
            edit_menu = self.menu_bar.addMenu("Upravit")
            
            print("üçé macOS menu struktura vytvo≈ôena - hledejte 'ReservationSystem' v horn√≠ li≈°tƒõ")
            
        else:
            print(f"üñ•Ô∏è Konfiguruji menu pro {current_os}...")
            # Pro ostatn√≠ platformy ponech√°me menu v oknƒõ
            self.menu_bar.setNativeMenuBar(False)
            
            self.login_action = QAction("P≈ôihl√°≈°en√≠", self)
            self.login_action.triggered.connect(self.show_login_dialog)
            self.menu_bar.addAction(self.login_action)
        
        print(f"üìã Menu akce 'P≈ôihl√°≈°en√≠' p≈ôid√°na")
        
        # U≈æivatel menu bude p≈ôid√°v√°no/odeb√≠r√°no dynamicky
        self.user_menu = None
        self.database_action = None  # Inicializace pro pozdƒõj≈°√≠ pou≈æit√≠
        
        self.setMenuBar(self.menu_bar)  # P≈ôid√°n√≠ menu bar do layoutu
        print(f"‚úÖ Menu bar nastaven")
        
        # --- STATUS BAR ---
        self.status_bar = self.statusBar()
        self.status_bar.showMessage("Nep≈ôihl√°≈°en")
        
        # Vytvo≈ôen√≠ widgetu pro checkboxy v status baru
        self.checkboxy_widget = QWidget()
        self.checkboxy_layout = QHBoxLayout(self.checkboxy_widget)
        self.checkboxy_layout.setContentsMargins(5, 2, 5, 2)
        self.checkboxy_layout.setSpacing(10)
        
        # P≈ôid√°n√≠ checkbox≈Ø do status baru napravo
        self.status_bar.addPermanentWidget(self.checkboxy_widget)
        
        # Slovn√≠k pro ulo≈æen√≠ checkbox≈Ø
        self.checkboxy = {}
        
        # --- CENTR√ÅLN√ç WIDGET A LAYOUT ---
        central_widget = QWidget()
        layout = QVBoxLayout(central_widget)
        
        # Styl pro v≈°echny tabulky v tomto oknƒõ
        self.setStyleSheet("""
            QTableWidget {
                background-color: #fafdff;
                font-size: 15px;
                color: #222;
                gridline-color: #b2d7ef;
                selection-background-color: #cceeff;
                selection-color: #000;
            }
            QTableWidget::item {
                padding: 6px;
            }
            QHeaderView::section {
                background-color: #f4efeb;
                color: black;
                font-weight: bold;
                font-size: 16px;
                text-decoration: underline;
                letter-spacing: 0.75px;
                text-transform: uppercase;
            }
        """)   
        

        # --- NOV√ù HORIZONT√ÅLN√ç LAYOUT PRO LOGO, DATUM, HODINY ---

    

        # --- St≈ôedn√≠ ƒç√°st: tlaƒç√≠tka a kalend√°≈ô ---
        stredni_widget = QWidget()
        stredni_layout = QHBoxLayout()
        stredni_layout.setContentsMargins(0, 0, 0, 0)
        stredni_layout.setSpacing(10)

        self.btn_predchozi = QPushButton("<")
        self.btn_predchozi.setFixedWidth(35)  # Men≈°√≠ tlaƒç√≠tka
        self.btn_predchozi.setStyleSheet("font-size: 18px;")
        self.btn_predchozi.clicked.connect(self.predchozi_den)

        self.kalendar = QDateEdit()
        self.kalendar.setDate(QDate.currentDate())
        self.kalendar.setCalendarPopup(True)
        self.kalendar.setStyleSheet("""
            QDateEdit {
                font-size: 20px;
                min-width: 180px;
                qproperty-alignment: AlignCenter;
                padding: 4px 8px;
            }
        """)
        self.kalendar.dateChanged.connect(self.nacti_rezervace)
        self.kalendar.dateChanged.connect(self.aktualizuj_format_kalendare)
        self.aktualizuj_format_kalendare(self.kalendar.date())

        self.btn_nasledujici = QPushButton(">")
        self.btn_nasledujici.setFixedWidth(35)  # Men≈°√≠ tlaƒç√≠tka
        self.btn_nasledujici.setStyleSheet("font-size: 18px;")
        self.btn_nasledujici.clicked.connect(self.nasledujici_den)

        stredni_layout.addWidget(self.btn_predchozi)
        stredni_layout.addWidget(self.kalendar)
        stredni_layout.addWidget(self.btn_nasledujici)
        stredni_widget.setLayout(stredni_layout)

        # P≈ôidat stretch mezi logo a st≈ôed, a mezi st≈ôed a hodiny
        # horni_radek.addStretch()
        horni_radek.addWidget(stredni_widget, alignment=Qt.AlignHCenter)
        #horni_radek.addStretch()
        
        # Legenda informace vpravo - kompaktnƒõj≈°√≠ pro men≈°√≠ obrazovky
        def legenda_stylesheet(color):
            return f"""
                background-color: {color};
                color: #222;
                border-radius: 2px;
                min-width: 60px;
                qproperty-alignment: AlignCenter;
                padding: 2px 3px;
                margin-right: 4px;
                font-weight: bold;
                font-size: 12px;
            """
        self.legenda_info = QHBoxLayout()
        legenda_vakcinace = QLabel("Vakcinace")
        legenda_vakcinace.setStyleSheet(legenda_stylesheet(vaccination_color))
        
        legenda_pauza = QLabel("Pauza")
        legenda_pauza.setStyleSheet(legenda_stylesheet(pause_color))
        
        self.legenda_info.addWidget(legenda_vakcinace)
        self.legenda_info.addWidget(legenda_pauza)
        horni_radek.addLayout(self.legenda_info)
        self.legenda_info.addStretch()
        
        
        # Hodiny vpravo - s responzivn√≠ velikost√≠
        self.clock_label = QLabel()
        # Zaƒçneme s men≈°√≠ velikost√≠ pro lep≈°√≠ responzivitu
        self.clock_label.setStyleSheet("font-size: 20px; font-weight: bold; min-width: 70px;")
        horni_radek.addWidget(self.clock_label, alignment=Qt.AlignRight)

        layout.addLayout(horni_radek)

        # Spus≈• timer pro hodiny
        timer = QTimer(self)
        timer.timeout.connect(self.update_clock)
        timer.start(1000)
        self.update_clock()

        # Z√°lo≈æky pro jednotliv√© ordinace
        self.tabulky = {} # mistnost -> QTableWidget
        
        # Vytvo≈ôen√≠ pevn√©ho kontejneru pro ordinace a chat
        self.ordinace_container = QWidget()
        # Nastav√≠me minim√°ln√≠ v√Ω≈°ku kontejneru pro zachov√°n√≠ layoutu
        self.ordinace_container.setMinimumHeight(600)
        
        self.ordinace_layout = QHBoxLayout(self.ordinace_container)
        self.ordinace_layout.setContentsMargins(5, 5, 5, 5)
        self.ordinace_layout.setSpacing(10)  # P≈ôid√°n√≠ spacing mezi sloupci
        
        # P≈ôid√°me neviditeln√Ω spacer widget pro zachov√°n√≠ layoutu
        self.layout_spacer = QWidget()
        self.layout_spacer.setMinimumHeight(500)
        self.layout_spacer.setVisible(False)  # Defaultnƒõ skryt√Ω
        self.ordinace_layout.addWidget(self.layout_spacer)
        
        # Chat widget - bude inicializov√°n a≈æ p≈ôi prvn√≠m pou≈æit√≠
        self.chat = None
        self.chat_initialized = False
        
        layout.addWidget(self.ordinace_container)
        
        self.aktualizuj_tabulku_ordinaci_layout()
        self.nacti_rezervace()
        
        # Nastaven√≠ auto-refresh pro synchronizaci v√≠ce instanc√≠
        self.setup_auto_refresh()
        
        self.setCentralWidget(central_widget)
        
        # Nastaven√≠ minim√°ln√≠ velikosti pro lep≈°√≠ responzivitu
        self.setMinimumSize(950, 600)  # Men≈°√≠ minim√°ln√≠ velikost pro MacBook
    
    def resizeEvent(self, event):
        """Jednoduch√° responzivn√≠ √∫prava bez rozb√≠jen√≠ layoutu"""
        super().resizeEvent(event)
        
        # Pouze pro velmi mal√© okna uprav√≠me fonty
        if self.width() < 1200:
            # Men≈°√≠ fonty pro √∫sporu m√≠sta
            self.clock_label.setStyleSheet("font-size: 18px; font-weight: bold; min-width: 60px;")
            self.kalendar.setStyleSheet("""
                QDateEdit {
                    font-size: 18px;
                    min-width: 160px;
                    qproperty-alignment: AlignCenter;
                    padding: 3px 6px;
                }
            """)
        else:
            # P≈Øvodn√≠ velikosti pro vƒõt≈°√≠ okna
            self.clock_label.setStyleSheet("font-size: 20px; font-weight: bold; min-width: 70px;")
            self.kalendar.setStyleSheet("""
                QDateEdit {
                    font-size: 20px;
                    min-width: 180px;
                    qproperty-alignment: AlignCenter;
                    padding: 4px 8px;
                }
            """)
        
    def aktualizuj_tabulku_ordinaci_layout(self):
        ordinace = get_ordinace_list()   
        
        # Zachov√°me chat checkbox p≈ôed maz√°n√≠m
        chat_checkbox_state = None
        chat_checkbox_ref = None
        if "Chat" in self.checkboxy:
            chat_checkbox_ref = self.checkboxy["Chat"]
            chat_checkbox_state = chat_checkbox_ref.isChecked()
        
        # Zachov√°me chat widget p≈ôed maz√°n√≠m layoutu
        chat_widget_ref = None
        if hasattr(self, 'chat') and self.chat:
            chat_widget_ref = self.chat
            # Doƒçasnƒõ odebereme chat z layoutu
            if self.ordinace_layout.indexOf(self.chat) != -1:
                self.ordinace_layout.removeWidget(self.chat)
        
        # Vyma≈æ star√© checkboxy ze status baru (kromƒõ chatu)
        while self.checkboxy_layout.count():
            item = self.checkboxy_layout.takeAt(0)
            widget = item.widget()
            if widget is not None and widget != chat_checkbox_ref:
                widget.deleteLater()
        
        # Odstra≈à v≈°echny widgety z layoutu (kromƒõ chatu a spaceru)
        while self.ordinace_layout.count():
            item = self.ordinace_layout.takeAt(0)
            widget = item.widget()
            if widget is not None and widget != chat_widget_ref and widget != getattr(self, 'layout_spacer', None):
                widget.deleteLater()
    
        # Nyn√≠ m≈Ø≈æe≈° bezpeƒçnƒõ p≈ôid√°vat nov√© tabulky
        self.tabulky.clear()
        # Vyƒçisti checkboxy, ale zachovej chat
        ordinace_checkboxy = {k: v for k, v in self.checkboxy.items() if k != "Chat"}
        for checkbox in ordinace_checkboxy.values():
            checkbox.deleteLater()
        if chat_checkbox_ref:
            self.checkboxy = {"Chat": chat_checkbox_ref}
        else:
            self.checkboxy.clear()
        
        for mistnost in ordinace:
            # Vytvo≈ôen√≠ checkboxu pro status bar
            checkbox = QCheckBox(mistnost)
            checkbox.setChecked(True)  # Defaultnƒõ za≈°krtnuto (tabulka viditeln√°)
            checkbox.setStyleSheet("""
                QCheckBox {
                    font-weight: bold;
                    font-size: 12px;
                    padding: 2px 4px;
                    background-color: #f0f0f0;
                    border-radius: 3px;
                    margin: 1px;
                }
                QCheckBox::indicator {
                    width: 16px;
                    height: 16px;
                }
            """)
            
            # P≈ôipojen√≠ checkboxu k funkci pro skr√Ωv√°n√≠/zobrazov√°n√≠
            checkbox.toggled.connect(partial(self.toggle_tabulka_visibility, mistnost))
            
            # P≈ôid√°n√≠ checkboxu do status baru
            self.checkboxy_layout.addWidget(checkbox)
            self.checkboxy[mistnost] = checkbox
            
            # Zbytek k√≥du z≈Øst√°v√° stejn√Ω
            tabulka = QTableWidget()
            tabulka.setEditTriggers(QTableWidget.NoEditTriggers)  # Zak√°zat editaci bunƒõk
            tabulka.setSelectionMode(QAbstractItemView.NoSelection) # Zak√°zat v√Ωbƒõr bunƒõk
            tabulka.setColumnCount(2) # Poƒçet sloupc≈Ø
            tabulka.setColumnWidth(0, 70) # ƒåas
            tabulka.horizontalHeader().setStretchLastSection(True)  # ≈ò√°dek rezervace v maxim√°ln√≠ ≈°√≠≈ôce
            tabulka.verticalHeader().setVisible(False)

            # P≈ôipojen√≠ sign√°lu pro dvojklik
            tabulka.cellDoubleClicked.connect(partial(self.zpracuj_dvojklik, mistnost))
            self.ordinace_layout.addWidget(tabulka)
            self.tabulky[mistnost] = tabulka
            
        # P≈ôid√°n√≠ checkboxu pro chat (pouze pokud je≈°tƒõ neexistuje)
        if "Chat" not in self.checkboxy:
            chat_checkbox = QCheckBox("Chat")
            chat_checkbox.setChecked(False)  # Chat defaultnƒõ skryt√Ω
            chat_checkbox.setStyleSheet("""
                QCheckBox {
                    font-weight: bold;
                    font-size: 12px;
                    padding: 2px 4px;
                    background-color: #e8f5e8;
                    border-radius: 3px;
                    margin: 1px;
                    color: #2e7d32;
                }
                QCheckBox::indicator {
                    width: 16px;
                    height: 16px;
                }
            """)
            chat_checkbox.toggled.connect(self.toggle_chat_visibility)
            
            # P≈ôid√°n√≠ mo≈ænosti konfigurace p≈ôi dvojkliku na checkbox
            chat_checkbox.mouseDoubleClickEvent = self.chat_checkbox_double_click
            
            self.checkboxy["Chat"] = chat_checkbox
        
        # P≈ôidej chat checkbox zpƒõt do layoutu
        if "Chat" in self.checkboxy:
            self.checkboxy_layout.addWidget(self.checkboxy["Chat"])
        
        # P≈ôidej chat widget zpƒõt do layoutu pokud byl inicializov√°n a mƒõl by b√Ωt viditeln√Ω
        if chat_widget_ref and chat_checkbox_state:
            self.ordinace_layout.addWidget(chat_widget_ref)
            chat_widget_ref.show()
        elif chat_widget_ref:
            # Chat widget existuje ale nemƒõl by b√Ωt viditeln√Ω
            chat_widget_ref.hide()
        
        self.nacti_rezervace()

    def toggle_chat_visibility(self, checked):
        """Skryje nebo zobraz√≠ chat podle stavu checkboxu."""
        if checked:
            if not self.chat_initialized:
                # Zobraz√≠ konfiguraƒçn√≠ dialog p≈ôi prvn√≠m zapnut√≠
                self.show_chat_config()
            else:
                # Pokud je chat ji≈æ inicializov√°n, ale nen√≠ v layoutu, p≈ôidej ho
                if self.chat not in [self.ordinace_layout.itemAt(i).widget() 
                                   for i in range(self.ordinace_layout.count()) 
                                   if self.ordinace_layout.itemAt(i).widget()]:
                    self.ordinace_layout.addWidget(self.chat)
                self.chat.show()
        else:
            if self.chat:
                self.chat.hide()
        
        # Aktualizujeme layout spacer
        self.update_layout_spacer()

    def show_chat_config(self):
        """Zobraz√≠ dialog pro konfiguraci chatu"""
        dialog = ChatConfigDialog(self)
        if dialog.exec():
            config = dialog.get_config()
            
            # Pokud chat u≈æ existuje, zniƒç√≠me ho p≈ôed vytvo≈ôen√≠m nov√©ho
            if self.chat_initialized:
                self.destroy_chat()
            
            self.initialize_chat(config)
        else:
            # Pokud u≈æivatel zru≈°√≠ dialog a chat neexistuje, od≈°krtni checkbox
            if not self.chat_initialized:
                self.checkboxy["Chat"].setChecked(False)
            self.update_layout_spacer()  # Aktualizujeme spacer

    def initialize_chat(self, config):
        """Inicializuje chat widget s danou konfigurac√≠"""
        try:
            # Urƒçen√≠ IP pro klienta
            server_ip = config.get("server_ip", "127.0.0.1")
            if server_ip == "0.0.0.0":
                client_ip = "127.0.0.1"
            else:
                client_ip = server_ip
                
            username = config.get("username", "U≈æivatel")
            server_port = config.get("server_port", 12345)
            
            # Vytvo≈ôen√≠ chat widgetu
            self.chat = ChatWidget(
                username=username, 
                server_host=client_ip, 
                server_port=server_port
            )
            
            # Nastaven√≠ velikosti chatu
            self.chat.setMinimumWidth(300)
            self.chat.setMaximumWidth(450)
            
            # Nastaven√≠ size policy pro lep≈°√≠ chov√°n√≠
            from PySide6.QtWidgets import QSizePolicy
            self.chat.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Expanding)
            
            # Nastaven√≠ r√°meƒçku pro lep≈°√≠ vizu√°ln√≠ oddƒõlen√≠
            self.chat.setStyleSheet("""
                ChatWidget {
                    border: 2px solid #ccc;
                    border-radius: 8px;
                    background-color: #f9f9f9;
                    margin: 2px;
                }
            """)
            
            # P≈ôid√°n√≠ chatu do layoutu
            self.ordinace_layout.addWidget(self.chat)
            
            self.chat_initialized = True
            
            # Aktualizujeme checkbox
            self.checkboxy["Chat"].setChecked(True)
            
        except Exception as e:
            from PySide6.QtWidgets import QMessageBox
            QMessageBox.critical(self, "Chyba", f"Nepoda≈ôilo se inicializovat chat:\n{str(e)}")
            self.checkboxy["Chat"].setChecked(False)

    def toggle_tabulka_visibility(self, mistnost, checked):
        """Skryje nebo zobraz√≠ tabulku podle stavu checkboxu."""
        if mistnost in self.tabulky:
            tabulka = self.tabulky[mistnost]
            if checked:
                tabulka.show()
            else:
                tabulka.hide()
        
        # Zkontrolujeme, zda je pot≈ôeba zobrazit layout spacer
        self.update_layout_spacer()
    
    def update_layout_spacer(self):
        """Aktualizuje viditelnost layout spaceru podle stavu v≈°ech widget≈Ø"""
        # Zkontrolujeme, zda spacer st√°le existuje
        if not hasattr(self, 'layout_spacer') or self.layout_spacer is None:
            return
            
        # Zkontrolujeme, zda je alespo≈à jedna tabulka nebo chat viditeln√Ω
        any_visible = False
        
        # Zkontrolujeme tabulky ordinac√≠
        for mistnost, checkbox in self.checkboxy.items():
            if mistnost != "Chat" and checkbox.isChecked():
                any_visible = True
                break
        
        # Zkontrolujeme chat
        if not any_visible and "Chat" in self.checkboxy and self.checkboxy["Chat"].isChecked():
            any_visible = True
        
        # Pokud nic nen√≠ viditeln√©, zobraz√≠me spacer pro zachov√°n√≠ layoutu
        try:
            self.layout_spacer.setVisible(not any_visible)
        except RuntimeError:
            # Widget byl ji≈æ smaz√°n, ignorujeme
            pass
    
    def add_logo(self):
        # Logo vlevo
        self.logo_label = QLabel()
        
        # Fix pro PyInstaller - spr√°vn√© urƒçen√≠ cesty k resources
        import sys
        if getattr(sys, 'frozen', False):
            # Produkƒçn√≠ executable - pou≈æij _MEIPASS
            base_path = sys._MEIPASS
        else:
            # Development - relativn√≠ cesta
            base_path = os.path.dirname(__file__)
        
        # Zkus naj√≠t logo v pictures slo≈æce
        logo_paths = [
            os.path.join(base_path, "pictures", "karakal_logo_grey.png"),
            os.path.join(base_path, "..", "pictures", "karakal_logo_grey.png"),
            os.path.join(os.path.dirname(__file__), "../pictures/karakal_logo_grey.png")
        ]
        
        pixmap = None
        logo_found = False
        
        for logo_path in logo_paths:
            if os.path.exists(logo_path):
                pixmap = QPixmap(logo_path)
                if not pixmap.isNull():
                    self.logo_label.setPixmap(pixmap.scaledToHeight(48))
                    logo_found = True
                    print(f"‚úÖ Logo naƒçteno z: {logo_path}")
                    break
        
        if not logo_found:
            self.logo_label.setText("Logo nenalezeno")
            print(f"‚ùå Logo nenalezeno. Hled√°no v:")
            for path in logo_paths:
                print(f"   - {path} (exists: {os.path.exists(path)})")
        
        self.logo_layout.addWidget(self.logo_label)
    
    
    def aktualizuj_doktori_layout(self):
      # Odstra≈à star√© widgety ze self.doktori_layout
      while self.doktori_layout.count():
          item = self.doktori_layout.takeAt(0)
          widget = item.widget()
          if widget:
              widget.deleteLater()
      # P≈ôidej nov√© ≈°t√≠tky podle aktu√°ln√≠ch dat
      for doktor in get_doktori():
          # Handle both dictionary (PostgreSQL) and tuple (SQLite) formats
          if isinstance(doktor, dict):
              is_active = doktor['isactive']  # PostgreSQL converts to lowercase
              jmeno = doktor['jmeno']
              prijmeni = doktor['prijmeni']
              barva = doktor['color']
          else:
              is_active = doktor[3]
              jmeno = doktor[1]
              prijmeni = doktor[2]
              barva = doktor[5]
              
          if is_active == 1:  # Pouze aktivn√≠ doktor
              jmeno_display = f"{jmeno}\n{prijmeni}"
              barva = barva.strip() if barva else "#CCCCCC"  # V√Ωchoz√≠ barva pro NULL
              label = QLabel(jmeno_display)
              label.setStyleSheet(f"""
                  background-color: {barva};
                  color: #222;
                  border-radius: 2px;
                  padding: 2px 4px;
                  margin-right: 6px;
                  font-weight: bold;
              """)
              self.doktori_layout.addWidget(label)
              
              
    def show_login_dialog(self):
        print("üîë Otev√≠r√°m p≈ôihla≈°ovac√≠ dialog...")
        dialog = LoginDialog(self)
        if dialog.exec():
            username, role = dialog.get_name_and_role()
            self.logged_in_user = username
            self.logged_in_user_role = role
            self.status_bar.showMessage(f"P≈ôihl√°≈°en√Ω u≈æivatel: {username}")
            
            # Aktualizace login akce - mus√≠me spr√°vnƒõ detekovat platformu
            import platform
            if platform.system() == "Darwin":  # macOS
                # Na macOS m√°me akce v r≈Øzn√Ωch menu, najdeme je a aktualizujeme
                for action in self.menu_bar.actions():
                    if action.menu():
                        for sub_action in action.menu().actions():
                            if sub_action.text() == "P≈ôihl√°≈°en√≠":
                                sub_action.setText("Odhl√°sit")
                                sub_action.triggered.disconnect()
                                sub_action.triggered.connect(self.logout_user)
                print("üçé macOS menu akce aktualizov√°ny")
            else:
                # Pro ostatn√≠ platformy
                self.login_action.setText("Odhl√°sit")
                self.login_action.triggered.disconnect()
                self.login_action.triggered.connect(self.logout_user)
            
            self.update_user_menu()  # <-- P≈ôidat/aktualizovat podmenu
            print(f"‚úÖ U≈æivatel {username} s rol√≠ {role} p≈ôihl√°≈°en")

    def logout_user(self):
        self.logged_in_user = None
        self.logged_in_user_role = None
        # Odstranit menu pro pl√°nov√°n√≠, pokud existuje
        # Bezpeƒçnƒõ odstranit plan_menu
        if hasattr(self, "plan_menu") and self.plan_menu is not None:
            try:
                self.menu_bar.removeAction(self.plan_menu.menuAction())
            except RuntimeError:
                pass  # plan_menu u≈æ m≈Ø≈æe b√Ωt zniƒçen
            self.plan_menu = None
            
        # Bezpeƒçnƒõ odstranit user_menu
        if self.user_menu is not None:
            try:
                self.menu_bar.removeAction(self.user_menu.menuAction())
            except RuntimeError:
                pass
            self.user_menu = None
            
        # Bezpeƒçnƒõ odstranit database_action
        if self.database_action is not None:
            try:
                self.menu_bar.removeAction(self.database_action)
            except RuntimeError:
                pass
            self.database_action = None
        
        self.status_bar.showMessage("Nep≈ôihl√°≈°en")
        
        # Aktualizace login akce - mus√≠me spr√°vnƒõ detekovat platformu
        import platform
        if platform.system() == "Darwin":  # macOS
            # Na macOS m√°me akce v r≈Øzn√Ωch menu, najdeme je a aktualizujeme
            for action in self.menu_bar.actions():
                if action.menu():
                    for sub_action in action.menu().actions():
                        if sub_action.text() == "Odhl√°sit":
                            sub_action.setText("P≈ôihl√°≈°en√≠")
                            sub_action.triggered.disconnect()
                            sub_action.triggered.connect(self.show_login_dialog)
            print("üçé macOS menu akce pro odhl√°≈°en√≠ aktualizov√°ny")
        else:
            # Pro ostatn√≠ platformy
            self.login_action.setText("P≈ôihl√°≈°en√≠")
            self.login_action.triggered.disconnect()
            self.login_action.triggered.connect(self.show_login_dialog)
        
    def update_user_menu(self):
        """Aktualizuje menu pro u≈æivatele podle jeho role."""
        print(f"üîÑ Aktualizuji menu pro roli: {self.logged_in_user_role}")
        
        if self.logged_in_user_role == "user":
            # Pokud je u≈æivatel bƒõ≈æn√Ω u≈æivatel, nebudeme p≈ôid√°vat ≈æ√°dn√© menu
            self.user_menu = None
            print("üë§ Bƒõ≈æn√Ω u≈æivatel - ≈æ√°dn√© dodateƒçn√© menu")
            return
          
        # Odeber star√© user_menu, pokud existuje
        if self.user_menu:
            self.menu_bar.removeAction(self.user_menu.menuAction())
            self.user_menu = None
            
        # Odeber star√© database_action, pokud existuje
        if self.database_action:
            self.menu_bar.removeAction(self.database_action)
            self.database_action = None

        # P≈ôidej nov√© podle role
        
        self.user_menu = QMenu("Nastaven√≠", self)
        
        # Datab√°zov√© menu jako souƒç√°st Nastaven√≠
        self.database_section = QAction("Zmƒõnit datab√°zi", self)
        self.database_section.triggered.connect(self.change_database)
        
        self.plan_surgery_section = QAction("Pl√°nov√°n√≠ ordinac√≠", self)
        self.plan_surgery_section.triggered.connect(self.zahaj_planovani_ordinaci)
        # P≈ôid√°n√≠ sekc√≠ pro administr√°tora
        self.users_section = QAction("Sekce u≈æivatel≈Ø", self)
        self.users_section.triggered.connect(self.sekce_uzivatelu)
        
        # P≈ôid√°n√≠ sekc√≠ pro administr√°tora
        self.doctors_section = QAction("Sekce dokto≈ôi", self)
        self.doctors_section.triggered.connect(self.sekce_doktoru)
        
        self.surgery_section = QAction("Sekce ordinace", self)
        self.surgery_section.triggered.connect(self.sekce_ordinace)
        
        
        self.database_days_deletion_setting = QAction("Nastaven√≠ smaz√°n√≠ dat", self)
        self.database_days_deletion_setting.triggered.connect(self.nastaveni_smazani_dat)

        self.reset_chat_action = QAction("Resetovat chat", self)
        self.reset_chat_action.triggered.connect(self.reset_chat)

        # Pokud bylo vytvo≈ôeno user_menu, p≈ôidej ho do menu_bar a akce
        if self.user_menu:
            self.menu_bar.addMenu(self.user_menu)
            if self.logged_in_user_role == "admin":
                self.user_menu.addAction(self.database_section)  # Pouze pro admina
            self.user_menu.addAction(self.plan_surgery_section)
            self.user_menu.addAction(self.users_section)
            self.user_menu.addAction(self.doctors_section)
            self.user_menu.addAction(self.surgery_section)
            self.user_menu.addAction(self.database_days_deletion_setting)
            self.user_menu.addAction(self.reset_chat_action)

    def sekce_ordinace(self):
        dialog = OrdinaceDialog(self)
        dialog.exec()

    def sekce_uzivatelu(self):
        dialog = UsersDialog(self, current_user=self.logged_in_user_role)
        dialog.exec()
        
    def sekce_doktoru(self):
        dialog = DoctorDialog(self)
        dialog.exec()
  
    def zahaj_planovani_ordinaci(self):
        self.plan_menu = QMenu("Pl√°nov√°n√≠ ordinac√≠", self)
        dialog = PlanovaniOrdinaciDialog(self)
        if dialog.exec():
          self.is_planning_active = True  # Nastavit flag - pozastavit auto-refresh
          print("üìã Pl√°nov√°n√≠ ordinaƒçn√≠ch ƒças≈Ø spu≈°tƒõno - auto-refresh pozastaven")
          self.povol_vyber_casu()
          self.menu_bar.addMenu(self.plan_menu)
          self.menu_bar.removeAction(self.user_menu.menuAction())  # Odstranƒõn√≠ Pl√°nov√°n√≠ z menu
          for tabulka in self.tabulky.values():  # Odznaƒç√≠ v≈°echny vybran√© ≈ô√°dky/bu≈àky
              tabulka.clearSelection()
  
    def update_clock(self):
        self.clock_label.setText(datetime.now().strftime("%H:%M:%S"))
        
    def povol_vyber_casu(self):
      def only_first_column_selection():
          for tabulka in self.tabulky.values():
              #tabulka.setEditTriggers(QTableWidget.AllEditTriggers)  # Zak√°zat editaci bunƒõk
              selected = tabulka.selectedItems()
              for item in selected:
                  if item.column() != 0:
                      item.setSelected(False)
  
      for tabulka in self.tabulky.values():
          tabulka.setSelectionMode(QTableWidget.MultiSelection)
          tabulka.setSelectionBehavior(QTableWidget.SelectRows)
          tabulka.itemSelectionChanged.connect(only_first_column_selection)
          # Nastav ≈ælutou barvu v√Ωbƒõru
          tabulka.setStyleSheet("""
              QTableWidget {
                  selection-background-color: yellow;
                  selection-color: black;
              }
          """)
      self.status_bar.showMessage("Vyber ƒçasy pouze v prvn√≠m sloupci ordinace a pokraƒçuj tlaƒç√≠tkem Pl√°nov√°n√≠ ordinac√≠, kde n√°slednƒõ Vyber doktora.")
      self.naplanovat_doktora = QAction("Vyber doktora", self) # Tlaƒç√≠tko pro v√Ωbƒõr doktora
      self.zrusit_vybrane = QAction("Zru≈°it vybran√Ω ƒças doktora", self) # Tlaƒç√≠tko pro zru≈°en√≠ v√Ωbƒõru doktora
      self.zrusit_vybrane.triggered.connect(self.zrus_vybrany_cas_doktora) # P≈ôid√°n√≠ akce pro zru≈°en√≠ v√Ωbƒõru
      self.ukoncit_planovani_doktora = QAction("Ukonƒçit pl√°nov√°n√≠", self) # Tlaƒç√≠tko pro ukonƒçen√≠ pl√°nov√°n√≠
      self.naplanovat_doktora.triggered.connect(self.uloz_vybrany_cas_doktora) # P≈ôid√°n√≠ akce pro ulo≈æen√≠ vybran√Ωch ƒças≈Ø a ordinace
      # self.zrusit_vybrane.triggered.connect(self.zrus_vybrany_cas_doktora) # P≈ôid√°n√≠ akce pro ulo≈æen√≠ vybran√Ωch ƒças≈Ø a ordinace
      self.ukoncit_planovani_doktora.triggered.connect(self.zrus_planovani) # Zru≈°en√≠ pl√°nov√°n√≠ ordinac√≠ a odstranƒõn√≠ tlaƒç√≠tka
      self.plan_menu.addAction(self.naplanovat_doktora) # P≈ôid√°n√≠ tlaƒç√≠tka pro v√Ωbƒõr doktora
      self.plan_menu.addAction(self.zrusit_vybrane) # P≈ôid√°n√≠ tlaƒç√≠tka pro v√Ωbƒõr doktora
      self.plan_menu.addAction(self.ukoncit_planovani_doktora) # P≈ôid√°n√≠ tlaƒç√≠tka pro ukonƒçen√≠ pl√°nov√°n√≠ ordinac√≠

    def zrus_vybrany_cas_doktora(self):
        # Z√≠sk√°n√≠ vybran√Ωch ƒças≈Ø a ordinace a ulo≈æen√≠ do datab√°ze
        all_doctors_colors = [ color[0] for color in get_all_doctors_colors()]
        barvy_puvodnich = []        
        vybrane_casy = []
        mistnost = None
        barva = None
        for m, tabulka in self.tabulky.items():
            for item in tabulka.selectedItems():
                #print(item.text(), item.row(), item.column())
                if item.column() == 0:
                  vybrane_casy.append(item.text())
                  mistnost = m  # Ulo≈æen√≠ ordinace, pokud je vybr√°n ƒças
                  # vybrane_casy.append((m, item.text()))
                  doktor_item = tabulka.item(item.row(), 1)
                  # Z√≠sk√°n√≠ barvy doktora z bu≈àky    
                  if doktor_item:
                    barva = doktor_item.background().color().name()
                    if barva in all_doctors_colors:
                      if not barva in barvy_puvodnich:
                        barvy_puvodnich.append(barva)
        
        # Ulo≈æen√≠ do datab√°ze
        datum = self.kalendar.date().toPython()
        # print(f"Barvy doktor≈Ø:{barvy_puvodnich}, Datum: {datum}, ƒåas od: {vybrane_casy[0]}, ƒåas do: {vybrane_casy[-1]}, Ordinace: {mistnost}")
        # print(vybrane_casy)
        
        # Check if there are selected times before proceeding
        if not vybrane_casy:
            self.status_bar.showMessage("≈Ω√°dn√© ƒçasy nejsou vybran√©.")
            return
            
        if not barvy_puvodnich:
            self.status_bar.showMessage("≈Ω√°dn√Ω doktor nen√≠ vybr√°n.")
            return
            
        uprav_ordinacni_cas(barvy_puvodnich=barvy_puvodnich, datum=datum, prace_od=vybrane_casy[0], prace_do=vybrane_casy[-1], nazev_ordinace=mistnost)
        self.status_bar.showMessage("Pl√°nov√°n√≠ ulo≈æeno. Pokraƒçuj v pl√°nov√°n√≠ ordinac√≠, nebo jej ukonƒçi.")
        # Vypnut√≠ v√Ωbƒõru a odstranƒõn√≠ tlaƒç√≠tka
        for tabulka in self.tabulky.values():
            tabulka.clearSelection()  # Odznaƒç√≠ v≈°echny vybran√© ≈ô√°dky/bu≈àky
            self.nacti_rezervace()  # Naƒçten√≠ rezervac√≠ pro obnoven√≠ p≈Øvodn√≠ho stavu tabulek
        
    def zrus_planovani(self):
        # Zru≈°en√≠ pl√°nov√°n√≠ a odstranƒõn√≠ tlaƒç√≠tka
        self.is_planning_active = False  # Obnovit auto-refresh
        print("‚úÖ Pl√°nov√°n√≠ ordinaƒçn√≠ch ƒças≈Ø ukonƒçeno - auto-refresh obnoven")
        self.status_bar.showMessage("Ukonƒçeno pl√°nov√°n√≠ ordinac√≠.")
        self.menu_bar.removeAction(self.plan_menu.menuAction())  # Odstranƒõn√≠ Pl√°nov√°n√≠ z menu
        self.update_user_menu() # P≈ôidat user menu zpƒõt
        for tabulka in self.tabulky.values():
            tabulka.setSelectionMode(QTableWidget.NoSelection)
            tabulka.clearSelection()
            #self.dokoncit_planovani_btn.deleteLater()
            #self.vyber_doktora_btn.deleteLater() 
            self.nacti_rezervace()  # Naƒçten√≠ rezervac√≠ pro obnoven√≠ p≈Øvodn√≠ho stavu tabulek   
    
    def uloz_vybrany_cas_doktora(self):
        # Z√≠sk√°n√≠ vybran√Ωch ƒças≈Ø a ordinace a ulo≈æen√≠ do datab√°ze
        all_doctors_colors = [ color[0] for color in get_all_doctors_colors()]
        match_doctor_colors = []        
        vybrane_casy = []
        mistnost = None
        barva = None
        for m, tabulka in self.tabulky.items():
            for item in tabulka.selectedItems():
                #print(item.text(), item.row(), item.column())
                if item.column() == 0:
                  vybrane_casy.append(item.text())
                  mistnost = m  # Ulo≈æen√≠ ordinace, pokud je vybr√°n ƒças
                  # vybrane_casy.append((m, item.text()))
                  doktor_item = tabulka.item(item.row(), 1)
                  # Z√≠sk√°n√≠ barvy doktora z bu≈àky    
                  if doktor_item:
                    barva = doktor_item.background().color().name()
                    if barva in all_doctors_colors:
                      if not barva in match_doctor_colors:
                        match_doctor_colors.append(barva)
        dialog = VyberDoktoraDialog(self)
        if dialog.exec():
            new_reservace_doktor = dialog.get_selected()
            
            # Ulo≈æen√≠ do datab√°ze
            datum = self.kalendar.date().toPython()
            
            uloz_nebo_uprav_ordinacni_cas(new_reservace_doktor, match_doctor_colors ,datum, vybrane_casy[0],vybrane_casy[-1], mistnost)
            self.status_bar.showMessage("Pl√°nov√°n√≠ ulo≈æeno. Pokraƒçuj v pl√°nov√°n√≠ ordinac√≠, nebo jej ukonƒçi.")
        # Vypnut√≠ v√Ωbƒõru a odstranƒõn√≠ tlaƒç√≠tka
        for tabulka in self.tabulky.values():
            tabulka.clearSelection()  # Odznaƒç√≠ v≈°echny vybran√© ≈ô√°dky/bu≈àky
            self.nacti_rezervace()  # Naƒçten√≠ rezervac√≠ pro obnoven√≠ p≈Øvodn√≠ho stavu tabulek
    
    def zpracuj_dvojklik(self, mistnost, row, col):
      if self.logged_in_user_role in ["admin", "supervisor", "user"]:
        tabulka = self.tabulky[mistnost]
        cas_item = tabulka.item(row, 0)
        data_item = tabulka.item(row, 1)
        cas_str = cas_item.text() if cas_item else ""
        data_str = data_item.text() if data_item else ""

        if not cas_str:
            return

        datum = self.kalendar.date().toPython()
        slot_start = datetime.combine(datum, datetime.strptime(cas_str, "%H:%M").time())

        # --- Zjisti jm√©no a barvu doktora podle rozvrhu ---
        rezervace_doktoru = ziskej_rozvrh_doktoru_dne(datum.strftime("%Y-%m-%d"))
        doktor_jmeno = ""
        for r in rezervace_doktoru:
            # r = (id, jmeno, barva, datum, od, do, ordinace)
            if r[6] == mistnost:
                od = datetime.strptime(r[4], "%H:%M").time()
                do = datetime.strptime(r[5], "%H:%M").time()
                if od <= slot_start.time() <= do:
                    doktor_jmeno = r[1]
                    break
                  
        # Zjisti d√©lku slotu stejnƒõ jako v nacti_rezervace
        if slot_start.time() >= datetime.strptime("09:00", "%H:%M").time() and slot_start.time() <= datetime.strptime("09:45", "%H:%M").time():
            slot = timedelta(minutes=15)
        elif slot_start.time() >= datetime.strptime("12:00", "%H:%M").time() and slot_start.time() < datetime.strptime("12:30", "%H:%M").time():
            slot = timedelta(minutes=30)
        elif slot_start.time() >= datetime.strptime("12:30", "%H:%M").time() and slot_start.time() < datetime.strptime("12:40", "%H:%M").time():
            slot = timedelta(minutes=10)
        elif slot_start.time() == datetime.strptime("12:40", "%H:%M").time():
            slot = timedelta(minutes=20)
        elif slot_start.time() >= datetime.strptime("16:00", "%H:%M").time() and slot_start.time() <= datetime.strptime("16:30", "%H:%M").time():
            slot = timedelta(minutes=15)
        elif slot_start.time() == datetime.strptime("16:45", "%H:%M").time():
            slot = timedelta(minutes=35)
        elif slot_start.time() >= datetime.strptime("17:20", "%H:%M").time():
            slot = timedelta(minutes=20)
        else:
            slot = timedelta(minutes=20)


        if not data_str.strip():
          # P≈ôedvypl≈à ƒças, ordinaci a doktora
          self.formular = FormularRezervace(
              self,
              predvyplneny_cas=f"{datum.strftime('%Y-%m-%d')} {cas_str}",
              predvyplnena_ordinace=mistnost,
              predvyplneny_doktor=doktor_jmeno  # <-- p≈ôidej tento parametr
          )
          self.formular.show()
        else:
            # ...p≈Øvodn√≠ logika pro otev≈ôen√≠ existuj√≠c√≠ rezervace...
            rezervace = ziskej_rezervace_dne(datum.strftime("%Y-%m-%d"))
            for r in rezervace:
                # Handle both datetime object (PostgreSQL) and string (SQLite) formats for r[0]
                if isinstance(r[0], datetime):
                    # PostgreSQL returns datetime objects
                    datum_str = r[0].strftime("%Y-%m-%d")
                else:
                    # SQLite returns strings
                    datum_str = str(r[0])
                    
                rez_cas = datetime.strptime(f"{datum_str} {r[10]}", "%Y-%m-%d %H:%M")
                if r[8] == mistnost and slot_start <= rez_cas < slot_start + slot:
                    self.formular = FormularRezervace(self, rezervace_data=r)
                    self.formular.show()
                    break    

    def aktualizuj_format_kalendare(self, datum):
        locale = QLocale(QLocale.Czech)
        den = locale.dayName(datum.dayOfWeek(), QLocale.LongFormat)
        self.kalendar.setDisplayFormat(f"'{den} 'd.M.yyyy")

    def predchozi_den(self):
        self.kalendar.setDate(self.kalendar.date().addDays(-1))

    def nasledujici_den(self):
        self.kalendar.setDate(self.kalendar.date().addDays(1))

    def nacti_rezervace(self):
      datum = self.kalendar.date().toPython()
      rezervace = ziskej_rezervace_dne(datum.strftime("%Y-%m-%d"))
      rezervace_doktoru = ziskej_rozvrh_doktoru_dne(datum.strftime("%Y-%m-%d"))
      ordinace = get_ordinace_list()
      
      # Vyma≈æ v≈°echny tabulky
      for tabulka in self.tabulky.values():
          tabulka.setRowCount(0)

      # Zmapuj rezervace podle ordinace
      mapovane = {i: [] for i in ordinace}
      for r in rezervace:
          # Handle both datetime object (PostgreSQL) and string (SQLite) formats for r[0]
          if isinstance(r[0], datetime):
              # PostgreSQL returns datetime objects
              datum_str = r[0].strftime("%Y-%m-%d")
          else:
              # SQLite returns strings
              datum_str = str(r[0])
              
          # Combine date and time properly
          cas_od = datetime.strptime(f"{datum_str} {r[10]}", "%Y-%m-%d %H:%M")
          cas_do = datetime.strptime(f"{datum_str} {r[11]}", "%Y-%m-%d %H:%M")
          
          id = r[1]
          doktor = r[2]
          doktor_color = r[3]
          pacient = r[4]
          majitel = r[5]
          kontakt = r[6]
          druh = r[7]
          mistnost = r[8]
          poznamka = r[9]

          if mistnost in mapovane:
              mapovane[mistnost].append((cas_od, cas_do, id, doktor, doktor_color, pacient, majitel, kontakt, druh, poznamka))
          
      # Vlo≈æ data do tabulek
      for mistnost, tabulka in self.tabulky.items():
          tabulka.setHorizontalHeaderLabels(["", f"{mistnost}"])
          
          index = 0
          cas = datetime.combine(datum, datetime.strptime("08:00", "%H:%M").time())
          end = datetime.combine(datum, datetime.strptime("20:00", "%H:%M").time())
          
          rozvrh_doktoru_map = {}
          for r in rezervace_doktoru:
              ordinace_nazev = r[6]
              if ordinace_nazev not in rozvrh_doktoru_map:
                  rozvrh_doktoru_map[ordinace_nazev] = []
              rozvrh_doktoru_map[ordinace_nazev].append(r)    
          
          while cas <= end:
              pause_time = False
              vaccination_time = False
              
              # Nastav slot podle ƒçasu
              if cas.time() >= datetime.strptime("09:00", "%H:%M").time() and cas.time() <= datetime.strptime("09:45", "%H:%M").time():
                  slot = timedelta(minutes=15)
                  vaccination_time = True
              elif cas.time() >= datetime.strptime("12:00", "%H:%M").time() and cas.time() < datetime.strptime("12:30", "%H:%M").time():
                slot = timedelta(minutes=30)
                pause_time = True
              elif cas.time() >= datetime.strptime("12:30", "%H:%M").time() and cas.time() < datetime.strptime("12:40", "%H:%M").time():
                slot = timedelta(minutes=10)
              elif cas.time() == datetime.strptime("12:40", "%H:%M").time():
                slot = timedelta(minutes=20)
              elif cas.time() >= datetime.strptime("16:00", "%H:%M").time() and cas.time() <= datetime.strptime("16:30", "%H:%M").time():
                  slot = timedelta(minutes=15)
                  vaccination_time = True
              elif cas.time() == datetime.strptime("16:45", "%H:%M").time():
                slot = timedelta(minutes=35)
                pause_time = True
              elif cas.time() >= datetime.strptime("17:20", "%H:%M").time():
                  slot = timedelta(minutes=20)
              else:
                  slot = timedelta(minutes=20)
                  
              cas_str = cas.strftime("%H:%M")
              tabulka.insertRow(index)
              
              # Kontrola rozvrhu doktora
              doktor_bg_color = "#ffffff"
              doktor_jmeno = ""
              if mistnost in rozvrh_doktoru_map:
                  for r in rozvrh_doktoru_map[mistnost]:
                      od = datetime.strptime(r[4], "%H:%M").time()
                      do = datetime.strptime(r[5], "%H:%M").time()
                      if od <= cas.time() <= do:
                        doktor_active = get_doktor_isactive_by_color(r[2])
                        if doktor_active == 1:
                          doktor_bg_color = r[2].strip()
                          doktor_jmeno = r[1]
                          break
                        
              tabulka.setItem(index, 0, QTableWidgetItem(cas_str))
              doktor_item = QTableWidgetItem("")
              
              # Najdi rezervace, kter√© zasahuj√≠ do aktu√°ln√≠ho slotu
              rezervace_pro_cas = []
              for rez in mapovane[mistnost]:
                  cas_od, cas_do = rez[0], rez[1]
                  slot_end = cas + slot
                  
                  # Univerz√°ln√≠ logika pro v≈°echny typy rezervac√≠
                  # Rezervace zasahuje do slotu pokud:
                  # zaƒç√°tek rezervace < konec slotu AND konec rezervace >= zaƒç√°tek slotu
                  if cas_od < slot_end and cas_do >= cas:
                      rezervace_pro_cas.append(rez)
              

              if doktor_jmeno:
                  doktor_item.setBackground(QColor(doktor_bg_color))
              tabulka.setItem(index, 1, doktor_item)

              # Vlo≈æ data rezervace
              if rezervace_pro_cas:
                for rez in rezervace_pro_cas:
                  cas_item = QTableWidgetItem(cas_str)
                  
                  tabulka.setItem(index, 0, cas_item)
                  
                  # Zobraz ƒças od-do pro v√≠ce≈ô√°dkov√© rezervace
                  cas_od_str = rez[0].strftime("%H:%M")
                  cas_do_str = rez[1].strftime("%H:%M")
                  
                  # Pokud rezervace trv√° v√≠ce slot≈Ø, zobraz ƒças od-do
                  if rez[0] < cas + slot and rez[1] > cas + slot:
                      # Rezervace pokraƒçuje do dal≈°√≠ch slot≈Ø
                      display_text = f"{rez[6]}: {rez[8]} - {rez[5]}"
                  else:
                      # Pokraƒçov√°n√≠ rezervace z p≈ôedchoz√≠ho slotu
                      display_text = f"{rez[6]}: {rez[8]} - {rez[5]}"
                  
                  doktor_item = QTableWidgetItem(display_text)
                  font = doktor_item.font()
                  font.setBold(True)
                  doktor_item.setFont(font)
                  doktor_item.setBackground(QColor(doktor_bg_color))
                  tabulka.setItem(index, 1, doktor_item)
                  
                  # Tooltip s detaily
                  tooltip_html = f"""
                      <table style="background-color: {doktor_bg_color}; padding: 8px; border-radius: 6px; border: 3px solid #009688; font-family: Arial; font-size: 14px; color: #222; min-width: 250px; margin: 10px; border-collapse: collapse;">
                          <thead>
                          <tr><th colspan="2" style="text-align: center; font-weight: bold; font-size: 16px; padding: 4px; border-radius: 3px; margin-bottom: 8px;">
                            üêï {rez[5]}
                          </th></tr>
                          </thead>
                          <tbody>
                          <tr><td colspan="2" style="text-align: center; color: lightgrey">{40*"-"}</td></tr>
                          <tr><td>üîó Druh:</td><td style="font-weight: bold; padding-top:1px">{rez[8]}</td></tr>
                          <tr><td>üë§ Majitel:</td><td style="font-weight: bold; padding-top:1px">{rez[6]}</td></tr>
                          <tr><td>ü©∫ Doktor:</td><td style="font-weight: bold; padding-top:1px">{rez[3]}</td></tr>
                          <tr><td>üï∞Ô∏è ƒåas:</td><td style="font-weight: bold; padding-top:1px">{cas_od_str} - {cas_do_str}</td></tr>
                          <tr><td>üìû Kontakt:</td><td style="font-weight: bold; padding-top:1px">{rez[7]}</td></tr>
                          <tr><td>üìù Pozn√°mka:</td><td style="font-weight: bold; padding-top:1px">{rez[9]}</td></tr>
                      </tbody>  
                      """
                  doktor_item.setToolTip(tooltip_html)

              # Nastaven√≠ pozad√≠ ≈ô√°dk≈Ø
              if index % 2 == 0:
                  for col in range(2):
                    tabulka.item(index, col).setBackground(QColor(table_grey_strip))
                    if vaccination_time:
                      tabulka.item(index, 0).setBackground(QColor(vaccination_color))
                    if doktor_bg_color and col == 1:
                      tabulka.item(index, 1).setBackground(QColor(doktor_bg_color))
                    if pause_time:
                      tabulka.item(index, col).setBackground(QColor(pause_color))
              else:
                  for col in range(2):
                    if vaccination_time and col == 0:
                      tabulka.item(index, 0).setBackground(QColor(vaccination_color))
                    elif pause_time:
                      tabulka.item(index, col).setBackground(QColor(pause_color))
                    elif doktor_bg_color and col == 1:
                      tabulka.item(index, 1).setBackground(QColor(doktor_bg_color))
                      
              index += 1
              cas += slot
            
      #print("Rezervace naƒçten√© z datab√°ze:", rezervace)
    
    def change_database(self):
        """Zobraz√≠ dialog pro zmƒõnu PostgreSQL datab√°ze."""
        
        reply = QMessageBox.question(
            self,
            "Zmƒõna datab√°ze",
            "Opravdu chcete zmƒõnit konfiguraci PostgreSQL datab√°ze?\n"
            "Aplikace se p≈ôipoj√≠ k nov√© datab√°zi po ulo≈æen√≠ nastaven√≠.",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            dialog = PostgreSQLSetupDialog(self)
            result = dialog.exec()
            
            if result == PostgreSQLSetupDialog.Accepted:
                if dialog.is_connection_successful():
                    QMessageBox.information(
                        self,
                        "√öspƒõch", 
                        "Konfigurace PostgreSQL datab√°ze byla √∫spƒõ≈°nƒõ zmƒõnƒõna.\n"
                        "P≈ôipojen√≠ k nov√© datab√°zi je funkƒçn√≠."
                    )
                    
                    # Aktualizuj zobrazen√≠ s novou datab√°z√≠
                    try:
                        self.aktualizuj_tabulku_ordinaci_layout()
                        self.aktualizuj_doktori_layout()
                        self.nacti_rezervace()
                    except Exception as e:
                        QMessageBox.warning(
                            self,
                            "Upozornƒõn√≠",
                            f"Datab√°ze byla zmƒõnƒõna, ale do≈°lo k chybƒõ p≈ôi aktualizaci zobrazen√≠:\n{str(e)}\n\n"
                            "Doporuƒçujeme restartovat aplikaci."
                        )
                else:
                    QMessageBox.warning(
                        self,
                        "Upozornƒõn√≠",
                        "Konfigurace byla ulo≈æena, ale test p≈ôipojen√≠ selhal.\n"
                        "Zkontrolujte nastaven√≠ a zkuste to znovu."
                    )
      
    def nastaveni_smazani_dat(self):
      """Zobraz√≠ dialog pro nastaven√≠ smaz√°n√≠ dat."""
      
      dialog = SmazRezervaceDialog(self)
      if dialog.exec():
          days_to_keep = dialog.get_days()
          if days_to_keep is not None:
              delete_after = dialog.set_days_to_keep()
              self.nacti_rezervace()
              if delete_after is not None:
                  # Zobraz √∫spƒõ≈°nou zpr√°vu
                  QMessageBox.information(
                      self,
                      "√öspƒõch",
                      f"Nastaven√≠ smaz√°n√≠ dat bylo √∫spƒõ≈°nƒõ aktualizov√°no.\nBylo smaz√°no {delete_after['pocet_smazanych']} rezervac√≠ star≈°√≠ch ne≈æ {delete_after['datum_hranice']}."
                  )
            
    def setup_icons(self):
        """Nastaven√≠ ikon pro aplikaci a okno."""
        import sys
        
        # Fix pro PyInstaller - spr√°vn√© urƒçen√≠ cesty k resources
        if getattr(sys, 'frozen', False):
            # Produkƒçn√≠ executable
            base_path = sys._MEIPASS
        else:
            # Development
            base_path = os.path.dirname(__file__)
        
        # Zkus naj√≠t ikonu v r≈Øzn√Ωch form√°tech a um√≠stƒõn√≠ch
        icon_paths = [
            # ICO form√°t (Windows)
            os.path.join(base_path, "pictures", "karakal_logo_grey.ico"),
            os.path.join(base_path, "..", "pictures", "karakal_logo_grey.ico"),
            # PNG form√°t (fallback)
            os.path.join(base_path, "pictures", "karakal_logo_grey.png"),
            os.path.join(base_path, "..", "pictures", "karakal_logo_grey.png"),
            # Development fallback
            os.path.join(os.path.dirname(__file__), "../pictures/karakal_logo_grey.ico"),
            os.path.join(os.path.dirname(__file__), "../pictures/karakal_logo_grey.png")
        ]
        
        app_icon = None
        icon_found = False
        
        for icon_path in icon_paths:
            if os.path.exists(icon_path):
                app_icon = QIcon(icon_path)
                if not app_icon.isNull():
                    icon_found = True
                    print(f"‚úÖ Ikona naƒçtena z: {icon_path}")
                    break
        
        if not icon_found:
            print(f"‚ùå Ikona nenalezena. Hled√°no v:")
            for path in icon_paths:
                print(f"   - {path} (exists: {os.path.exists(path)})")
            return
        
        if app_icon and not app_icon.isNull():
            # Nastaven√≠ ikony pro okno (lev√Ω horn√≠ roh)
            self.setWindowIcon(app_icon)
            
            # Nastaven√≠ ikony pro celou aplikaci (taskbar, Alt+Tab) - D≈ÆLE≈ΩIT√â PO≈òAD√ç
            app = QApplication.instance()
            if app:
                app.setWindowIcon(app_icon)
                
            # Pro Windows - explicitn√≠ nastaven√≠ pro v≈°echna okna
            if hasattr(app, 'setWindowIcon'):
                QApplication.setWindowIcon(app_icon)
            
            # System tray ikona...
            if QSystemTrayIcon.isSystemTrayAvailable():
                self.tray_icon = QSystemTrayIcon(app_icon, self)
                
                # Vytvo≈ôen√≠ kontextov√©ho menu pro syst√©movou li≈°tu
                tray_menu = QMenu()
                
                # Akce pro zobrazen√≠/skryt√≠ okna
                show_action = tray_menu.addAction("Zobrazit")
                show_action.triggered.connect(self.show)
                
                hide_action = tray_menu.addAction("Skr√Ωt")
                hide_action.triggered.connect(self.hide)
                
                tray_menu.addSeparator()
                
                # Akce pro ukonƒçen√≠ aplikace
                quit_action = tray_menu.addAction("Ukonƒçit")
                quit_action.triggered.connect(QApplication.instance().quit)
                
                self.tray_icon.setContextMenu(tray_menu)
                
                # Zobrazen√≠ ikony v syst√©mov√© li≈°tƒõ
                self.tray_icon.show()
                
                # Tooltip pro ikonu v syst√©mov√© li≈°tƒõ
                self.tray_icon.setToolTip("Veterin√°rn√≠ rezervaƒçn√≠ syst√©m")
                
                # Reakce na kliknut√≠ na ikonu (zobraz√≠/skryje okno)
                self.tray_icon.activated.connect(self.tray_icon_activated)
                print("‚úÖ System tray ikona nastavena")
            else:
                print("‚ö†Ô∏è Syst√©mov√° li≈°ta nen√≠ dostupn√°")
                self.tray_icon = None
        else:
            print(f"‚ùå Nepoda≈ôilo se naƒç√≠st ≈æ√°dnou ikonu")
            self.tray_icon = None
            
    def tray_icon_activated(self, reason):
        """Obsluha kliknut√≠ na ikonu v syst√©mov√© li≈°tƒõ."""
        if reason == QSystemTrayIcon.DoubleClick:
            # Dvojklik - zobraz√≠/skryje okno
            if self.isVisible():
                self.hide()
            else:
                self.show()
                self.raise_()
                self.activateWindow()
        elif reason == QSystemTrayIcon.Trigger:
            # Jednoduch√© kliknut√≠ - zobraz√≠ okno
            if not self.isVisible():
                self.show()
                self.raise_()
                self.activateWindow()


    def closeEvent(self, event):
        """Obsluha zav≈ôen√≠ aplikace"""
        # Zastaven√≠ auto-refresh timeru
        if hasattr(self, 'refresh_timer'):
            self.refresh_timer.stop()
        
        # Zav≈ôi chat pokud je inicializov√°n
        if self.chat_initialized and self.chat:
            try:
                self.chat.close()
            except Exception as e:
                print(f"Chyba p≈ôi zav√≠r√°n√≠ chatu: {e}")
        
        event.accept()

    def destroy_chat(self):
        """Kompletnƒõ zniƒç√≠ chat widget a resetuje stav"""
        if self.chat_initialized and self.chat:
            try:
                # Odebere chat z layoutu
                if self.ordinace_layout.indexOf(self.chat) != -1:
                    self.ordinace_layout.removeWidget(self.chat)
                
                # Zav≈ôe a sma≈æe chat widget
                self.chat.close()
                self.chat.deleteLater()
                self.chat = None
                self.chat_initialized = False
                
                # Od≈°krtne checkbox
                if "Chat" in self.checkboxy:
                    self.checkboxy["Chat"].setChecked(False)
                
                # Aktualizuje layout spacer
                self.update_layout_spacer()
                
            except Exception as e:
                print(f"Chyba p≈ôi niƒçen√≠ chatu: {e}")

    def reset_chat(self):
        """Resetuje chat - u≈æiteƒçn√© pro zmƒõnu konfigurace"""
        self.destroy_chat()
        # Chat bude znovu inicializov√°n p≈ôi dal≈°√≠m zapnut√≠ checkboxu

    def chat_checkbox_double_click(self, event):
        """Obsluha dvojkliku na chat checkbox - otev≈ôe konfiguraci"""
        self.show_chat_config()
        # Zabr√°n√≠ standardn√≠mu chov√°n√≠ checkboxu
        event.accept()

    def setup_auto_refresh(self):
        """Nastav√≠ automatick√© obnovov√°n√≠ dat pro synchronizaci v√≠ce instanc√≠."""
        # Timer pro automatick√© obnoven√≠ ka≈æd√Ωch 30 sekund
        self.refresh_timer = QTimer()
        self.refresh_timer.timeout.connect(self.auto_refresh_data)
        self.refresh_timer.start(30000)  # 30 sekund
        
        # Kl√°vesov√° zkratka F5 pro manu√°ln√≠ obnoven√≠
        refresh_shortcut = QShortcut(QKeySequence("F5"), self)
        refresh_shortcut.activated.connect(self.manual_refresh_data)
        
        # Kl√°vesov√° zkratka Ctrl+R pro rychl√© manu√°ln√≠ obnoven√≠
        refresh_shortcut_ctrl = QShortcut(QKeySequence("Ctrl+R"), self)
        refresh_shortcut_ctrl.activated.connect(self.manual_refresh_data)
        
        print("üîÑ Auto-refresh nastaven (30s interval, F5/Ctrl+R pro manu√°ln√≠)")

    def auto_refresh_data(self):
        """Automatick√© obnoven√≠ dat."""
        try:
            # P≈ôeskoƒçit auto-refresh pokud prob√≠h√° pl√°nov√°n√≠ ordinaƒçn√≠ch ƒças≈Ø
            if self.is_planning_active:
                print("‚è∏Ô∏è Auto-refresh pozastaven - prob√≠h√° pl√°nov√°n√≠ ordinaƒçn√≠ch ƒças≈Ø")
                return
                
            print("üîÑ Auto-refresh dat...")
            self.nacti_rezervace()
            # Pouze p≈ôi pot≈ôebƒõ aktualizovat i ostatn√≠ komponenty:
            # self.aktualizuj_doktori_layout()
            # self.aktualizuj_tabulku_ordinaci_layout()
        except Exception as e:
            print(f"‚ö†Ô∏è Chyba p≈ôi auto-refresh: {e}")

    def manual_refresh_data(self):
        """Manu√°ln√≠ obnoven√≠ dat (F5 nebo Ctrl+R)."""
        try:
            print("üîÑ Manu√°ln√≠ refresh dat (F5/Ctrl+R)...")
            self.nacti_rezervace()
            self.aktualizuj_doktori_layout()
            self.aktualizuj_tabulku_ordinaci_layout()
            
            # Zobraz kr√°tk√© potvrzen√≠
            if hasattr(self, 'status_bar'):
                self.status_bar.showMessage("‚úÖ Data obnovena", 2000)
        except Exception as e:
            print(f"‚ö†Ô∏è Chyba p≈ôi manu√°ln√≠m refresh: {e}")
            if hasattr(self, 'status_bar'):
                self.status_bar.showMessage(f"‚ùå Chyba p≈ôi obnoven√≠: {e}", 5000)