import re
from PySide6.QtWidgets import (QWidget, QVBoxLayout, QPushButton, QLabel, 
                               QDateEdit, QHBoxLayout, QTableWidget, QApplication, QMessageBox,
                               QTableWidgetItem, QMenuBar, QMenu, QMainWindow, QAbstractItemView,
                               QSystemTrayIcon, QCheckBox, QInputDialog, QTabWidget, QDialog)
from PySide6.QtGui import QAction
from PySide6.QtCore import QDate, QLocale, QTimer, Qt
from PySide6.QtGui import QColor, QPixmap, QAction, QFont, QIcon, QShortcut, QKeySequence
from views.formular_rezervace import FormularRezervace
from models.rezervace import ziskej_rezervace_dne
from datetime import datetime, timedelta
from models.ordinace import get_all_ordinace
from models.doktori import uloz_nebo_uprav_ordinacni_cas, ziskej_rozvrh_doktoru_dne, get_all_doctors_colors, get_doktor_isactive_by_color, uprav_ordinacni_cas
from views.login_dialog import LoginDialog
from controllers.data import table_grey_strip, vaccination_color, pause_color, anesthesia_color
# from controllers.rezervace_controller import uloz_rezervaci
from models.databaze import get_doktori, set_database_path, inicializuj_databazi
from config import test_database_connection
from views.vyber_doktora_dialog import VyberDoktoraDialog
from views.planovani_ordinaci_dialog import PlanovaniOrdinaciDialog
from views.users_dialog import UsersDialog
from views.doctors_dialog import DoctorDialog
from views.ordinace_dialog import OrdinaceDialog
from views.database_setup_dialog import DatabaseSetupDialog
from views.postgresql_setup_dialog import PostgreSQLSetupDialog
from views.smaz_rezervace_po_xy_dialog import SmazRezervaceDialog
from views.chat_config_dialog import ChatConfigDialog
from views.time_cell_delegate import TimeCellDelegate
from views.patient_status_dialog import PatientStatusDialog
from views.doctor_calendar_dialog import DoctorCalendarDialog
from functools import partial
from controllers.data import basic_style
import os
from models.rezervace import smaz_rezervace_starsi_nez, aktualizuj_stav_rezervace
from models.settings import get_settings
from chat.chat_widget import ChatWidget
import json  # P≈ôidejte tento import

# Smaz√°n√≠ rezervac√≠ star≈°√≠ch ne≈æ nastaven√Ω poƒçet dn√≠
smaz_rezervace_starsi_nez(get_settings("days_to_keep"))


def get_ordinace_list():
    """Optimalizovan√° funkce pro z√≠sk√°n√≠ seznamu n√°zv≈Ø ordinac√≠."""
    from models.databaze import get_connection
    with get_connection() as conn:
        cur = conn.cursor()
        cur.execute('SELECT DISTINCT nazev FROM Ordinace ORDER BY nazev')
        return [row[0] for row in cur.fetchall()]

class HlavniOkno(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Veterin√°rn√≠ rezervaƒçn√≠ syst√©m")
        # Nastaven√≠ ikony aplikace a okna
        self.setup_icons()
        layout = QVBoxLayout()    
        self.logged_in_user = None
        self.logged_in_user_role = None
        
        # Flag pro detekci aktivn√≠ho pl√°nov√°n√≠ ordinaƒçn√≠ch ƒças≈Ø
        self.is_planning_active = False
        
        # Seznam otev≈ôen√Ωch dialog≈Ø pro sledov√°n√≠
        self.open_dialogs = []
        
        # Inicializace pro p≈ô√≠padn√© budouc√≠ roz≈°√≠≈ôen√≠
        # Real-time synchronizace moment√°lnƒõ zak√°z√°na kv≈Øli stabilitƒõ
        
        self.logo_layout = QHBoxLayout()
        self.add_logo()
        
        horni_radek = QHBoxLayout()
        self.doktori_layout = QHBoxLayout()
        self.aktualizuj_doktori_layout()
        
        horni_radek.addLayout(self.logo_layout)
        horni_radek.addLayout(self.doktori_layout)
        
        app = QApplication.instance()
        if app:
           # Nastaven√≠ del≈°√≠ho timeoutu pro tooltips - BEZ glob√°ln√≠ho stylingu
           try:
               from PySide6.QtWidgets import QToolTip
               
               # Pouze pokus o nastaven√≠ timeoutu - bez CSS
               app.setProperty("toolTipTimeout", 15000)
               
               # Alternativn√≠ metody pro timeout
               if hasattr(QToolTip, 'setHideDelay'):
                   QToolTip.setHideDelay(15000)  # 15 sekund
               if hasattr(QToolTip, 'setShowDelay'):
                   QToolTip.setShowDelay(1500)    # 0.5 sekundy
                   
           except Exception as e:
               print(f"Tooltip configuration error: {e}")
                
         
        # --- MENU BAR ---
        import platform
        current_os = platform.system()
        print(f"üñ•Ô∏è Detekovan√Ω OS: {current_os}")
        
        self.menu_bar = QMenuBar(self)
        
        # macOS specifick√© nastaven√≠
        if current_os == "Darwin":  # macOS
            print("üçé Konfiguruji menu pro macOS...")
            # Na macOS se menu automaticky p≈ôesouv√° do syst√©mov√©ho menu baru
            self.menu_bar.setNativeMenuBar(True)
            
            # Pro macOS mus√≠me vytvo≈ôit menu trochu jinak
            # Nejprve vytvo≈ôme hlavn√≠ aplikaƒçn√≠ akci
            self.login_action = QAction("P≈ôihl√°≈°en√≠", self)
            self.login_action.triggered.connect(self.show_login_dialog)
            
            # Vytvo≈ô√≠me menu "ReservationSystem" 
            app_menu = self.menu_bar.addMenu("ReservationSystem")
            app_menu.addAction(self.login_action)
            
            # P≈ôid√°me separator a Quit akci pro spr√°vn√© macOS chov√°n√≠
            app_menu.addSeparator()
            quit_action = QAction("Ukonƒçit ReservationSystem", self)
            quit_action.setShortcut("Cmd+Q")
            quit_action.triggered.connect(self.close)
            app_menu.addAction(quit_action)
            
            # Vytvo≈ô√≠me tak√© Edit menu pro konzistenci s macOS
            edit_menu = self.menu_bar.addMenu("Upravit")
            
            print("üçé macOS menu struktura vytvo≈ôena - hledejte 'ReservationSystem' v horn√≠ li≈°tƒõ")
            
        else:
            print(f"üñ•Ô∏è Konfiguruji menu pro {current_os}...")
            # Pro ostatn√≠ platformy ponech√°me menu v oknƒõ
            self.menu_bar.setNativeMenuBar(False)
            
            self.login_action = QAction("P≈ôihl√°≈°en√≠", self)
            self.login_action.triggered.connect(self.show_login_dialog)
            self.menu_bar.addAction(self.login_action)
        
        print(f"üìã Menu akce 'P≈ôihl√°≈°en√≠' p≈ôid√°na")
        
        # U≈æivatel menu bude p≈ôid√°v√°no/odeb√≠r√°no dynamicky
        self.user_menu = None
        self.database_action = None  # Inicializace pro pozdƒõj≈°√≠ pou≈æit√≠

        self.menu_bar.setStyleSheet("margin:0,2,0,2")  # Aplikace z√°kladn√≠ho stylu

        self.setMenuBar(self.menu_bar)  # P≈ôid√°n√≠ menu bar do layoutu
        print(f"‚úÖ Menu bar nastaven")
        
        # --- STATUS BAR ---
        self.status_bar = self.statusBar()
        self.status_bar.showMessage("Nep≈ôihl√°≈°en")
        self.status_bar.setContentsMargins(2, 0, 2, 0)  # Minim√°ln√≠ margins
        
        # Vytvo≈ôen√≠ widgetu pro checkboxy v status baru - KOMPAKTN√ç
        self.checkboxy_widget = QWidget()
        self.checkboxy_widget.setMaximumHeight(25)  # Omezit v√Ω≈°ku status baru
        self.checkboxy_layout = QHBoxLayout(self.checkboxy_widget)
        self.checkboxy_layout.setContentsMargins(2, 0, 2, 0)  # Minim√°ln√≠ margins
        self.checkboxy_layout.setSpacing(5)  # Men≈°√≠ spacing
        
        # P≈ôid√°n√≠ checkbox≈Ø do status baru napravo
        self.status_bar.addPermanentWidget(self.checkboxy_widget)
        
        # Slovn√≠k pro ulo≈æen√≠ checkbox≈Ø
        self.checkboxy = {}
        
        # --- CENTR√ÅLN√ç WIDGET A LAYOUT ---
        central_widget = QWidget()
        layout = QVBoxLayout(central_widget)
        
        # Styl pro v≈°echny tabulky v tomto oknƒõ - MINIMALIZOV√ÅNO S PODBARVOV√ÅN√çM A ƒåITELN√ùM P√çSMEM
        self.setStyleSheet("""
            QTableWidget {
                background-color: #fafdff;
                font-size: 12px;
                color: #222;
                gridline-color: #b2d7ef;
                selection-background-color: #cceeff;
                selection-color: #000;
            }
            QTableWidget::item {
                padding: 0px 1px;
                margin: 0px;
                line-height: 0.9;
            }
            QHeaderView::section {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                    stop: 0 #e6f3ff, stop: 1 #b3d9ff);
                color: #0066cc;
                font-weight: bold;
                font-size: 11px;
                text-decoration: none;
                letter-spacing: 0.5px;
                text-transform: uppercase;
                padding: 2px 4px;
                margin: 0px;
                max-height: 14px;
                min-height: 14px;
                border: 1px solid #0066cc;
                border-radius: 3px;
                text-align: center;
            }
            
            /* Specifick√© stylov√°n√≠ pro prvn√≠ sloupec (ƒças) */
            QHeaderView::section:first {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                    stop: 0 #fff2e6, stop: 1 #ffd9b3);
                color: #cc6600;
                font-size: 10px;
            }
            
            /* Efekt p≈ôi hover */
            QHeaderView::section:hover {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                    stop: 0 #cce6ff, stop: 1 #99ccff);
            }
        """)   
        

        # --- NOV√ù HORIZONT√ÅLN√ç LAYOUT PRO LOGO, DATUM, HODINY ---

    

        # --- St≈ôedn√≠ ƒç√°st: tlaƒç√≠tka a kalend√°≈ô --- ULTRA KOMPAKTN√ç VERZE
        stredni_widget = QWidget()
        stredni_widget.setMaximumHeight(35)  # Ultra mal√° v√Ω≈°ka st≈ôedn√≠ho widgetu
        stredni_layout = QHBoxLayout()
        stredni_layout.setContentsMargins(0, 0, 0, 0)
        stredni_layout.setSpacing(5)  # Zmen≈°it spacing

        self.btn_predchozi = QPushButton("<")
        self.btn_predchozi.setFixedSize(35, 35)  # Ultra mal√° tlaƒç√≠tka
        self.btn_predchozi.setStyleSheet("font-size: 16px; padding: 0px;")
        self.btn_predchozi.clicked.connect(self.predchozi_den)

        self.kalendar = QDateEdit()
        self.kalendar.setDate(QDate.currentDate())
        self.kalendar.setCalendarPopup(True)
        self.kalendar.setMaximumHeight(40)  # Ultra mal√° v√Ω≈°ka kalend√°≈ôe
        self.kalendar.setStyleSheet("""
            QDateEdit {
                font-size: 16px;
                min-width: 160px;
                font-weight: bold;
                qproperty-alignment: AlignCenter;
                padding: 1px 2px;
            }
        """)
        self.kalendar.dateChanged.connect(self.nacti_rezervace)
        self.kalendar.dateChanged.connect(self.aktualizuj_format_kalendare)
        self.aktualizuj_format_kalendare(self.kalendar.date())

        self.btn_nasledujici = QPushButton(">")
        self.btn_nasledujici.setFixedSize(35, 35)  # Ultra mal√° tlaƒç√≠tka
        self.btn_nasledujici.setStyleSheet("font-size: 16px; padding: 0px;")
        self.btn_nasledujici.clicked.connect(self.nasledujici_den)

        stredni_layout.addWidget(self.btn_predchozi)
        stredni_layout.addWidget(self.kalendar)
        stredni_layout.addWidget(self.btn_nasledujici)
        stredni_widget.setLayout(stredni_layout)

        # P≈ôidat stretch mezi logo a st≈ôed, a mezi st≈ôed a hodiny
        # horni_radek.addStretch()
        horni_radek.addWidget(stredni_widget, alignment=Qt.AlignHCenter)
        #horni_radek.addStretch()
        
        # Legenda informace vpravo - EXTR√âMNƒö KOMPAKTN√ç
        def legenda_stylesheet(color):
            return f"""
                background-color: {color};
                color: #222;
                border-radius: 1px;
                qproperty-alignment: AlignCenter;
                padding: 1px 2px;
                margin-right: 2px;
                font-weight: bold;
                font-size: 12px;
            """
        self.legenda_info = QHBoxLayout()
        legenda_vakcinace = QLabel("Vakcinace")
        legenda_vakcinace.setMaximumHeight(30)
        legenda_vakcinace.setStyleSheet(legenda_stylesheet(vaccination_color))
        
        legenda_pauza = QLabel("Pauza")
        legenda_pauza.setMaximumHeight(30)
        legenda_pauza.setStyleSheet(legenda_stylesheet(pause_color))
        
        legenda_anestezie = QLabel("Anestezie")
        legenda_anestezie.setMaximumHeight(30)
        legenda_anestezie.setStyleSheet(legenda_stylesheet(anesthesia_color))
        
        self.legenda_info.addWidget(legenda_vakcinace)
        self.legenda_info.addWidget(legenda_pauza)
        self.legenda_info.addWidget(legenda_anestezie)
        horni_radek.addLayout(self.legenda_info)
        self.legenda_info.addStretch()
        
        
        # Hodiny vpravo - KOMPAKTN√ç verze
        self.clock_label = QLabel()
        self.clock_label.setMaximumHeight(30)
        self.clock_label.setStyleSheet("font-size: 22px; font-weight: bold; min-width: 40px; padding: 0px;")
        horni_radek.addWidget(self.clock_label, alignment=Qt.AlignRight)

        layout.addLayout(horni_radek)

        # Z√°lo≈æky pro jednotliv√© ordinace
        self.tabulky = {} # mistnost -> QTableWidget
        
        # Promƒõnn√° pro sledov√°n√≠ posledn√≠ minuty aktualizace zv√Ωraznƒõn√≠
        self.last_highlight_minute = -1
        
        # Spus≈• timer pro hodiny a aktualizaci ƒçasu
        timer = QTimer(self)
        timer.timeout.connect(self.update_clock)
        timer.start(1000)
        self.update_clock()
        
        # Vytvo≈ôen√≠ pevn√©ho kontejneru pro ordinace a chat
        self.ordinace_container = QWidget()
        # Nastav√≠me nejmen≈°√≠ mo≈ænou minim√°ln√≠ v√Ω≈°ku kontejneru pro maxim√°ln√≠ prostor pro tabulky
        self.ordinace_container.setMinimumHeight(370)
        
        self.ordinace_layout = QHBoxLayout(self.ordinace_container)
        self.ordinace_layout.setContentsMargins(0, 2, 0, 2)  # Minim√°ln√≠ margins
        self.ordinace_layout.setSpacing(5)  # Men≈°√≠ spacing mezi sloupci
        
        # P≈ôid√°me neviditeln√Ω spacer widget pro zachov√°n√≠ layoutu
        self.layout_spacer = QWidget()
        self.layout_spacer.setMinimumHeight(150)  # Men≈°√≠ spacer
        self.layout_spacer.setVisible(False)  # Defaultnƒõ skryt√Ω
        self.ordinace_layout.addWidget(self.layout_spacer)
        
        # Chat widget - bude inicializov√°n a≈æ p≈ôi prvn√≠m pou≈æit√≠
        self.chat = None
        self.chat_initialized = False
        
        layout.addWidget(self.ordinace_container)
        
        self.aktualizuj_tabulku_ordinaci_layout()
        self.nacti_rezervace()
        
        # Nastaven√≠ auto-refresh pro synchronizaci v√≠ce instanc√≠
        self.setup_auto_refresh()
        
        self.setCentralWidget(central_widget)
        
        # Nastaven√≠ minim√°ln√≠ velikosti pro lep≈°√≠ responzivitu
        self.setMinimumSize(950, 420)  # Nejmen≈°√≠ mo≈æn√° minim√°ln√≠ velikost pro maxim√°ln√≠ prostor tabulk√°m
        
        # Nastaven√≠ listener≈Ø pro database zmƒõny
        self.setup_database_listeners()
    
    def resizeEvent(self, event):
        """Jednoduch√° responzivn√≠ √∫prava bez rozb√≠jen√≠ layoutu"""
        super().resizeEvent(event)
        
        # Pouze pro velmi mal√© okna uprav√≠me fonty
        if self.width() < 1200:
            # Men≈°√≠ fonty pro √∫sporu m√≠sta
            self.clock_label.setStyleSheet("font-size: 18px; font-weight: bold; min-width: 60px;")
            self.kalendar.setStyleSheet("""
                QDateEdit {
                    font-size: 18px;
                    min-width: 160px;
                    qproperty-alignment: AlignCenter;
                    padding: 3px 6px;
                }
            """)
        else:
            # P≈Øvodn√≠ velikosti pro vƒõt≈°√≠ okna
            self.clock_label.setStyleSheet("font-size: 20px; font-weight: bold; min-width: 70px;")
            self.kalendar.setStyleSheet("""
                QDateEdit {
                    font-size: 20px;
                    min-width: 180px;
                    qproperty-alignment: AlignCenter;
                    padding: 4px 8px;
                }
            """)
        
    def aktualizuj_tabulku_ordinaci_layout(self):
        ordinace = get_ordinace_list()   
        
        # Zachov√°me chat checkbox p≈ôed maz√°n√≠m
        chat_checkbox_state = None
        chat_checkbox_ref = None
        if "Chat" in self.checkboxy:
            chat_checkbox_ref = self.checkboxy["Chat"]
            chat_checkbox_state = chat_checkbox_ref.isChecked()
        
        # Zachov√°me chat widget p≈ôed maz√°n√≠m layoutu
        chat_widget_ref = None
        if hasattr(self, 'chat') and self.chat:
            chat_widget_ref = self.chat
            # Doƒçasnƒõ odebereme chat z layoutu
            if self.ordinace_layout.indexOf(self.chat) != -1:
                self.ordinace_layout.removeWidget(self.chat)
        
        # Vyma≈æ star√© checkboxy ze status baru (kromƒõ chatu)
        while self.checkboxy_layout.count():
            item = self.checkboxy_layout.takeAt(0)
            widget = item.widget()
            if widget is not None and widget != chat_checkbox_ref:
                widget.deleteLater()
        
        # Odstra≈à v≈°echny widgety z layoutu (kromƒõ chatu a spaceru)
        while self.ordinace_layout.count():
            item = self.ordinace_layout.takeAt(0)
            widget = item.widget()
            if widget is not None and widget != chat_widget_ref and widget != getattr(self, 'layout_spacer', None):
                widget.deleteLater()
    
        # Nyn√≠ m≈Ø≈æe≈° bezpeƒçnƒõ p≈ôid√°vat nov√© tabulky
        self.tabulky.clear()
        # Vyƒçisti checkboxy, ale zachovej chat
        ordinace_checkboxy = {k: v for k, v in self.checkboxy.items() if k != "Chat"}
        for checkbox in ordinace_checkboxy.values():
            checkbox.deleteLater()
        if chat_checkbox_ref:
            self.checkboxy = {"Chat": chat_checkbox_ref}
        else:
            self.checkboxy.clear()
        
        for mistnost in ordinace:
            # Vytvo≈ôen√≠ checkboxu pro status bar
            checkbox = QCheckBox(mistnost)
            checkbox.setChecked(True)  # Defaultnƒõ za≈°krtnuto (tabulka viditeln√°)
            checkbox.setStyleSheet("""
                QCheckBox {
                    font-weight: bold;
                    font-size: 10px;
                    padding: 1px 2px;
                    background-color: #f0f0f0;
                    border-radius: 2px;
                    margin: 0px;
                }
                QCheckBox::indicator {
                    width: 12px;
                    height: 12px;
                }
            """)
            
            # P≈ôipojen√≠ checkboxu k funkci pro skr√Ωv√°n√≠/zobrazov√°n√≠
            checkbox.toggled.connect(partial(self.toggle_tabulka_visibility, mistnost))
            
            # P≈ôid√°n√≠ checkboxu do status baru
            self.checkboxy_layout.addWidget(checkbox)
            self.checkboxy[mistnost] = checkbox
            
            # Vytvo≈ô√≠me kontejner pro vlastn√≠ hlaviƒçku a tabulku
            table_container = QWidget()
            table_layout = QVBoxLayout(table_container)
            table_layout.setContentsMargins(0, 0, 0, 0)
            table_layout.setSpacing(0)
            
            # Vytvo≈ô√≠me vlastn√≠ slouƒçenou hlaviƒçku
            custom_header = QLabel(f"{mistnost}")
            custom_header.setStyleSheet("""
                QLabel {
                    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                        stop: 0 #e6f3ff, stop: 1 #b3d9ff);
                    color: #0066cc;
                    font-weight: bold;
                    font-size: 11px;
                    letter-spacing: 0.5px;
                    text-transform: uppercase;
                    padding: 2px 4px;
                    border: 1px solid #0066cc;
                    border-radius: 3px;
                    text-align: center;
                    max-height: 14px;
                    min-height: 14px;
                }
            """)
            custom_header.setAlignment(Qt.AlignCenter)
            table_layout.addWidget(custom_header)
            
            # Vytvo≈ô√≠me tabulku bez hlaviƒçky
            tabulka = QTableWidget()
            tabulka.setEditTriggers(QTableWidget.NoEditTriggers)  # Zak√°zat editaci bunƒõk
            tabulka.setSelectionMode(QAbstractItemView.NoSelection) # Zak√°zat v√Ωbƒõr bunƒõk
            tabulka.setColumnCount(2) # Poƒçet sloupc≈Ø
            tabulka.setColumnWidth(0, 70) # ƒåas
            tabulka.horizontalHeader().setStretchLastSection(True)  # ≈ò√°dek rezervace v maxim√°ln√≠ ≈°√≠≈ôce
            tabulka.horizontalHeader().setVisible(False)  # Skryjeme p≈Øvodn√≠ hlaviƒçku
            tabulka.verticalHeader().setVisible(False)
            
            # Minimalizace margins pro maxim√°ln√≠ vyu≈æit√≠ prostoru
            tabulka.setContentsMargins(0, 0, 0, 0)

            # Nastaven√≠ extr√©mnƒõ mal√© v√Ω≈°ky ≈ô√°dk≈Ø pro zobrazen√≠ v≈°ech 38 ≈ô√°dk≈Ø
            tabulka.verticalHeader().setDefaultSectionSize(2)  # ULTRA mal√° v√Ω≈°ka ≈ô√°dk≈Ø
            
            # Nastaven√≠ deleg√°tu pro sloupec s ƒçasem (sloupec 0) pro zobrazen√≠ koleƒçka s barvami doktor≈Ø
            time_delegate = TimeCellDelegate(tabulka)
            tabulka.setItemDelegateForColumn(0, time_delegate)

            # P≈ôipojen√≠ sign√°lu pro dvojklik
            tabulka.cellDoubleClicked.connect(partial(self.zpracuj_dvojklik, mistnost))
            
            # Nastaven√≠ kontextov√©ho menu pro prav√© tlaƒç√≠tko
            tabulka.setContextMenuPolicy(Qt.CustomContextMenu)
            tabulka.customContextMenuRequested.connect(partial(self.zobraz_kontextove_menu, mistnost))
            
            # P≈ôipojen√≠ synchronizace scrollov√°n√≠
            scrollbar = tabulka.verticalScrollBar()
            scrollbar.valueChanged.connect(partial(self.sync_table_scrolling, mistnost))
            
            # P≈ôid√°me tabulku do kontejneru s vlastn√≠ hlaviƒçkou
            table_layout.addWidget(tabulka)
            
            # P≈ôid√°me kontejner do hlavn√≠ho layoutu m√≠sto tabulky
            self.ordinace_layout.addWidget(table_container)
            self.tabulky[mistnost] = tabulka
            
        # P≈ôid√°n√≠ checkboxu pro chat (pouze pokud je≈°tƒõ neexistuje)
        if "Chat" not in self.checkboxy:
            chat_checkbox = QCheckBox("Chat")
            chat_checkbox.setChecked(False)  # Chat defaultnƒõ skryt√Ω
            chat_checkbox.setStyleSheet("""
                QCheckBox {
                    font-weight: bold;
                    font-size: 10px;
                    padding: 1px 2px;
                    background-color: #e8f5e8;
                    border-radius: 2px;
                    margin: 0px;
                    color: #2e7d32;
                }
                QCheckBox::indicator {
                    width: 12px;
                    height: 12px;
                }
            """)
            chat_checkbox.toggled.connect(self.toggle_chat_visibility)
            
            # P≈ôid√°n√≠ mo≈ænosti konfigurace p≈ôi dvojkliku na checkbox
            chat_checkbox.mouseDoubleClickEvent = self.chat_checkbox_double_click
            
            self.checkboxy["Chat"] = chat_checkbox
        
        # P≈ôidej chat checkbox zpƒõt do layoutu
        if "Chat" in self.checkboxy:
            self.checkboxy_layout.addWidget(self.checkboxy["Chat"])
        
        # P≈ôidej chat widget zpƒõt do layoutu pokud byl inicializov√°n a mƒõl by b√Ωt viditeln√Ω
        if chat_widget_ref and chat_checkbox_state:
            self.ordinace_layout.addWidget(chat_widget_ref)
            chat_widget_ref.show()
        elif chat_widget_ref:
            # Chat widget existuje ale nemƒõl by b√Ωt viditeln√Ω
            chat_widget_ref.hide()
        
        self.nacti_rezervace()
        
        # Aplikuj optim√°ln√≠ v√Ω≈°ku ≈ô√°dk≈Ø po inicializaci s mal√Ωm zpo≈ædƒõn√≠m
        from PySide6.QtCore import QTimer
        QTimer.singleShot(100, self.apply_optimal_row_height)

    def apply_optimal_row_height(self):
        """Aplikuje optim√°ln√≠ v√Ω≈°ku ≈ô√°dk≈Ø podle aktu√°ln√≠ velikosti okna"""
        # Pro zobrazen√≠ v≈°ech 38 ≈ô√°dk≈Ø (8:00-20:00) pot≈ôebujeme ULTRA mal√© ≈ô√°dky
        # Matematika: 38 ≈ô√°dk≈Ø √ó v√Ω≈°ka + hlaviƒçky + margins ‚â§ dostupn√©ho prostoru
        if self.height() < 600:
            row_height = 2  # ULTRA mal√© pro velmi mal√© monitory
        elif self.height() < 700:
            row_height = 3  # EXTR√âMNƒö mal√©
        elif self.height() < 800:
            row_height = 4  # Velmi mal√©
        else:
            row_height = 5  # Mal√© i pro velk√© monitory
            
        # Aplikuj na v≈°echny tabulky
        for tabulka in self.tabulky.values():
            tabulka.verticalHeader().setDefaultSectionSize(row_height)
            # Minimalizuj v≈°echny mo≈æn√© spacing
            tabulka.setContentsMargins(0, 0, 0, 0)
            # Minimalizace grid lines
            tabulka.setShowGrid(True)  # Zachovat m≈ô√≠≈æku ale minim√°ln√≠
            # Force update tabulky
            tabulka.updateGeometry()

    def toggle_chat_visibility(self, checked):
        """Skryje nebo zobraz√≠ chat podle stavu checkboxu."""
        if checked:
            if not self.chat_initialized:
                # Zobraz√≠ konfiguraƒçn√≠ dialog p≈ôi prvn√≠m zapnut√≠
                self.show_chat_config()
            else:
                # Pokud je chat ji≈æ inicializov√°n, ale nen√≠ v layoutu, p≈ôidej ho
                if self.chat not in [self.ordinace_layout.itemAt(i).widget() 
                                   for i in range(self.ordinace_layout.count()) 
                                   if self.ordinace_layout.itemAt(i).widget()]:
                    self.ordinace_layout.addWidget(self.chat)
                self.chat.show()
        else:
            if self.chat:
                self.chat.hide()
        
        # Aktualizujeme layout spacer
        self.update_layout_spacer()

    def show_chat_config(self):
        """Zobraz√≠ dialog pro konfiguraci chatu"""
        dialog = ChatConfigDialog(self)
        self.register_dialog(dialog)
        if dialog.exec():
            config = dialog.get_config()
            
            # Pokud chat u≈æ existuje, zniƒç√≠me ho p≈ôed vytvo≈ôen√≠m nov√©ho
            if self.chat_initialized:
                self.destroy_chat()
            
            self.initialize_chat(config)
        else:
            # Pokud u≈æivatel zru≈°√≠ dialog a chat neexistuje, od≈°krtni checkbox
            if not self.chat_initialized:
                self.checkboxy["Chat"].setChecked(False)
            self.update_layout_spacer()  # Aktualizujeme spacer

    def initialize_chat(self, config):
        """Inicializuje chat widget s danou konfigurac√≠"""
        try:
            # Urƒçen√≠ IP pro klienta
            server_ip = config.get("server_ip", "127.0.0.1")
            if server_ip == "0.0.0.0":
                client_ip = "127.0.0.1"
            else:
                client_ip = server_ip
                
            username = config.get("username", "U≈æivatel")
            server_port = config.get("server_port", 12345)
            
            # Vytvo≈ôen√≠ chat widgetu
            self.chat = ChatWidget(
                username=username, 
                server_host=client_ip, 
                server_port=server_port
            )
            
            # Nastaven√≠ velikosti chatu
            self.chat.setMinimumWidth(300)
            self.chat.setMaximumWidth(450)
            
            # Nastaven√≠ size policy pro lep≈°√≠ chov√°n√≠
            from PySide6.QtWidgets import QSizePolicy
            self.chat.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Expanding)
            
            # Nastaven√≠ r√°meƒçku pro lep≈°√≠ vizu√°ln√≠ oddƒõlen√≠
            self.chat.setStyleSheet("""
                ChatWidget {
                    border: 2px solid #ccc;
                    border-radius: 8px;
                    background-color: #f9f9f9;
                    margin: 2px;
                }
            """)
            
            # P≈ôid√°n√≠ chatu do layoutu
            self.ordinace_layout.addWidget(self.chat)
            
            self.chat_initialized = True
            
            # Aktualizujeme checkbox
            self.checkboxy["Chat"].setChecked(True)
            
        except Exception as e:
            from PySide6.QtWidgets import QMessageBox
            QMessageBox.critical(self, "Chyba", f"Nepoda≈ôilo se inicializovat chat:\n{str(e)}")
            self.checkboxy["Chat"].setChecked(False)

    def toggle_tabulka_visibility(self, mistnost, checked):
        """Skryje nebo zobraz√≠ tabulku podle stavu checkboxu."""
        if mistnost in self.tabulky:
            tabulka = self.tabulky[mistnost]
            if checked:
                tabulka.show()
            else:
                tabulka.hide()
        
        # Zkontrolujeme, zda je pot≈ôeba zobrazit layout spacer
        self.update_layout_spacer()
    
    def update_layout_spacer(self):
        """Aktualizuje viditelnost layout spaceru podle stavu v≈°ech widget≈Ø"""
        # Zkontrolujeme, zda spacer st√°le existuje
        if not hasattr(self, 'layout_spacer') or self.layout_spacer is None:
            return
            
        # Zkontrolujeme, zda je alespo≈à jedna tabulka nebo chat viditeln√Ω
        any_visible = False
        
        # Zkontrolujeme tabulky ordinac√≠
        for mistnost, checkbox in self.checkboxy.items():
            if mistnost != "Chat" and checkbox.isChecked():
                any_visible = True
                break
        
        # Zkontrolujeme chat
        if not any_visible and "Chat" in self.checkboxy and self.checkboxy["Chat"].isChecked():
            any_visible = True
        
        # Pokud nic nen√≠ viditeln√©, zobraz√≠me spacer pro zachov√°n√≠ layoutu
        try:
            self.layout_spacer.setVisible(not any_visible)
        except RuntimeError:
            # Widget byl ji≈æ smaz√°n, ignorujeme
            pass
    
    def add_logo(self):
        # Logo vlevo
        self.logo_label = QLabel()
        
        # Fix pro PyInstaller - spr√°vn√© urƒçen√≠ cesty k resources
        import sys
        if getattr(sys, 'frozen', False):
            # Produkƒçn√≠ executable - pou≈æij _MEIPASS
            base_path = sys._MEIPASS
        else:
            # Development - relativn√≠ cesta
            base_path = os.path.dirname(__file__)
        
        # Zkus naj√≠t logo v pictures slo≈æce - cross-platform cesty
        logo_paths = [
            os.path.join(base_path, "pictures", "karakal_logo_grey.png"),
            os.path.join(base_path, "..", "pictures", "karakal_logo_grey.png"),
            os.path.join(os.path.dirname(__file__), "..", "pictures", "karakal_logo_grey.png"),
            os.path.join(os.path.dirname(os.path.dirname(__file__)), "pictures", "karakal_logo_grey.png")
        ]
        
        pixmap = None
        logo_found = False
        
        for logo_path in logo_paths:
            if os.path.exists(logo_path):
                pixmap = QPixmap(logo_path)
                if not pixmap.isNull():
                    self.logo_label.setPixmap(pixmap.scaledToHeight(30))  # Logo
                    self.logo_label.setMaximumHeight(30)
                    logo_found = True
                    print(f"‚úÖ Logo naƒçteno z: {logo_path}")
                    break
        
        if not logo_found:
            self.logo_label.setText("Logo nenalezeno")
            print(f"‚ùå Logo nenalezeno. Hled√°no v:")
            for path in logo_paths:
                print(f"   - {path} (exists: {os.path.exists(path)})")
        
        self.logo_layout.addWidget(self.logo_label)
    
    
    def aktualizuj_doktori_layout(self):
      # Odstra≈à star√© widgety ze self.doktori_layout
      while self.doktori_layout.count():
          item = self.doktori_layout.takeAt(0)
          widget = item.widget()
          if widget:
              widget.deleteLater()
      # P≈ôidej nov√© ≈°t√≠tky podle aktu√°ln√≠ch dat
      for doktor in get_doktori():
          # Handle both dictionary (PostgreSQL) and tuple (SQLite) formats
          if isinstance(doktor, dict):
              is_active = doktor['isactive']  # PostgreSQL converts to lowercase
              jmeno = doktor['jmeno']
              prijmeni = doktor['prijmeni']
              barva = doktor['color']
          else:
              is_active = doktor[3]
              jmeno = doktor[1]
              prijmeni = doktor[2]
              barva = doktor[5]
              
          if is_active == 1:  # Pouze aktivn√≠ doktor
              jmeno_display = f"{jmeno}\n{prijmeni}"
              jmeno_full = f"{jmeno} {prijmeni}"
              barva = barva.strip() if barva else "#CCCCCC"  # V√Ωchoz√≠ barva pro NULL
              
              # Vytvo≈ôen√≠ tlaƒç√≠tka m√≠sto labelu
              button = QPushButton(jmeno_display)
              button.setStyleSheet(f"""
                  QPushButton {{
                      background-color: {barva};
                      color: #222;
                      border: 1px solid #999;
                      border-radius: 4px;
                      padding: 4px 6px;
                      margin-right: 6px;
                      font-weight: bold;
                      font-size: 11px;
                      text-align: center;
                  }}
                  QPushButton:hover {{
                      background-color: {barva};
                      border: 2px solid #333;
                  }}
                  QPushButton:pressed {{
                      background-color: {barva};
                      border: 2px solid #000;
                  }}
              """)
              
              # P≈ôipojen√≠ funkce pro otev≈ôen√≠ kalend√°≈ôe
              button.clicked.connect(partial(self.show_doctor_calendar, jmeno_full, barva))
              
              self.doktori_layout.addWidget(button)
    
    def show_doctor_calendar(self, doctor_name, doctor_color):
        """Zobraz√≠ kalend√°≈ô slu≈æeb pro vybran√©ho doktora"""
        dialog = DoctorCalendarDialog(doctor_name, doctor_color, self)
        self.register_dialog(dialog)  # Registruj dialog pro sledov√°n√≠
        dialog.exec()
              
              
    def show_login_dialog(self):
        dialog = LoginDialog(self)
        self.register_dialog(dialog)
        if dialog.exec():
            username, role = dialog.get_name_and_role()
            self.logged_in_user = username
            self.logged_in_user_role = role
            self.status_bar.showMessage(f"P≈ôihl√°≈°en√Ω u≈æivatel: {username}")
            
            # Aktualizace login akce - mus√≠me spr√°vnƒõ detekovat platformu
            import platform
            if platform.system() == "Darwin":  # macOS
                # Na macOS m√°me akce v r≈Øzn√Ωch menu, najdeme je a aktualizujeme
                for action in self.menu_bar.actions():
                    if action.menu():
                        for sub_action in action.menu().actions():
                            if sub_action.text() == "P≈ôihl√°≈°en√≠":
                                sub_action.setText("Odhl√°sit")
                                sub_action.triggered.disconnect()
                                sub_action.triggered.connect(self.logout_user)
                print("üçé macOS menu akce aktualizov√°ny")
            else:
                # Pro ostatn√≠ platformy
                self.login_action.setText("Odhl√°sit")
                self.login_action.triggered.disconnect()
                self.login_action.triggered.connect(self.logout_user)
            
            self.update_user_menu()  # <-- P≈ôidat/aktualizovat podmenu

    def logout_user(self):
        self.logged_in_user = None
        self.logged_in_user_role = None
        # Odstranit menu pro pl√°nov√°n√≠, pokud existuje
        # Bezpeƒçnƒõ odstranit plan_menu
        if hasattr(self, "plan_menu") and self.plan_menu is not None:
            try:
                self.menu_bar.removeAction(self.plan_menu.menuAction())
            except RuntimeError:
                pass  # plan_menu u≈æ m≈Ø≈æe b√Ωt zniƒçen
            self.plan_menu = None
            
        # Bezpeƒçnƒõ odstranit user_menu
        if self.user_menu is not None:
            try:
                self.menu_bar.removeAction(self.user_menu.menuAction())
            except RuntimeError:
                pass
            self.user_menu = None
            
        # Bezpeƒçnƒõ odstranit database_action
        if self.database_action is not None:
            try:
                self.menu_bar.removeAction(self.database_action)
            except RuntimeError:
                pass
            self.database_action = None
        
        self.status_bar.showMessage("Nep≈ôihl√°≈°en")
        
        # Aktualizace login akce - mus√≠me spr√°vnƒõ detekovat platformu
        import platform
        if platform.system() == "Darwin":  # macOS
            # Na macOS m√°me akce v r≈Øzn√Ωch menu, najdeme je a aktualizujeme
            for action in self.menu_bar.actions():
                if action.menu():
                    for sub_action in action.menu().actions():
                        if sub_action.text() == "Odhl√°sit":
                            sub_action.setText("P≈ôihl√°≈°en√≠")
                            sub_action.triggered.disconnect()
                            sub_action.triggered.connect(self.show_login_dialog)
            print("üçé macOS menu akce pro odhl√°≈°en√≠ aktualizov√°ny")
        else:
            # Pro ostatn√≠ platformy
            self.login_action.setText("P≈ôihl√°≈°en√≠")
            self.login_action.triggered.disconnect()
            self.login_action.triggered.connect(self.show_login_dialog)
        
    def update_user_menu(self):
        """Aktualizuje menu pro u≈æivatele podle jeho role."""
        if self.logged_in_user_role == "user":
            # Pokud je u≈æivatel bƒõ≈æn√Ω u≈æivatel, nebudeme p≈ôid√°vat ≈æ√°dn√© menu
            self.user_menu = None
            return
          
        # Odeber star√© user_menu, pokud existuje
        if self.user_menu:
            self.menu_bar.removeAction(self.user_menu.menuAction())
            self.user_menu = None
            
        # Odeber star√© database_action, pokud existuje
        if self.database_action:
            self.menu_bar.removeAction(self.database_action)
            self.database_action = None

        # P≈ôidej nov√© podle role
        
        self.user_menu = QMenu("Nastaven√≠", self)
        
        # Datab√°zov√© menu jako souƒç√°st Nastaven√≠
        self.database_section = QAction("Zmƒõnit datab√°zi", self)
        self.database_section.triggered.connect(self.change_database)
        
        self.plan_surgery_section = QAction("Pl√°nov√°n√≠ ordinac√≠", self)
        self.plan_surgery_section.triggered.connect(self.zahaj_planovani_ordinaci)
        # P≈ôid√°n√≠ sekc√≠ pro administr√°tora
        self.users_section = QAction("Sekce u≈æivatel≈Ø", self)
        self.users_section.triggered.connect(self.sekce_uzivatelu)
        
        # P≈ôid√°n√≠ sekc√≠ pro administr√°tora
        self.doctors_section = QAction("Sekce dokto≈ôi", self)
        self.doctors_section.triggered.connect(self.sekce_doktoru)
        
        self.surgery_section = QAction("Sekce ordinace", self)
        self.surgery_section.triggered.connect(self.sekce_ordinace)
        
        
        self.database_days_deletion_setting = QAction("Nastaven√≠ smaz√°n√≠ dat", self)
        self.database_days_deletion_setting.triggered.connect(self.nastaveni_smazani_dat)

        self.reset_chat_action = QAction("Resetovat chat", self)
        self.reset_chat_action.triggered.connect(self.reset_chat)

        # Pokud bylo vytvo≈ôeno user_menu, p≈ôidej ho do menu_bar a akce
        if self.user_menu:
            self.menu_bar.addMenu(self.user_menu)
            if self.logged_in_user_role == "admin":
                self.user_menu.addAction(self.database_section)  # Pouze pro admina
            self.user_menu.addAction(self.plan_surgery_section)
            self.user_menu.addAction(self.users_section)
            self.user_menu.addAction(self.doctors_section)
            self.user_menu.addAction(self.surgery_section)
            self.user_menu.addAction(self.database_days_deletion_setting)
            self.user_menu.addAction(self.reset_chat_action)

    def sekce_ordinace(self):
        dialog = OrdinaceDialog(self)
        self.register_dialog(dialog)
        dialog.exec()

    def sekce_uzivatelu(self):
        dialog = UsersDialog(self, current_user=self.logged_in_user_role)
        self.register_dialog(dialog)
        dialog.exec()
        
    def sekce_doktoru(self):
        dialog = DoctorDialog(self)
        self.register_dialog(dialog)
        dialog.exec()
  
    def zahaj_planovani_ordinaci(self):
        self.plan_menu = QMenu("Pl√°nov√°n√≠ ordinac√≠", self)
        dialog = PlanovaniOrdinaciDialog(self)
        self.register_dialog(dialog)
        if dialog.exec():
          self.is_planning_active = True  # Nastavit flag - pozastavit auto-refresh
          self.povol_vyber_casu()
          self.menu_bar.addMenu(self.plan_menu)
          self.menu_bar.removeAction(self.user_menu.menuAction())  # Odstranƒõn√≠ Pl√°nov√°n√≠ z menu
          for tabulka in self.tabulky.values():  # Odznaƒç√≠ v≈°echny vybran√© ≈ô√°dky/bu≈àky
              tabulka.clearSelection()
  
    def update_clock(self):
        now = datetime.now()
        self.clock_label.setText(now.strftime("%H:%M:%S"))
        
        # Zkontroluj, zda se zmƒõnila minuta a aktualizuj zv√Ωraznƒõn√≠ ƒçasu
        current_minute = now.minute
        if current_minute != self.last_highlight_minute:
            self.last_highlight_minute = current_minute
            self.update_current_time_highlight()

        
    def update_current_time_highlight(self):
        """Projde v≈°echny tabulky a aktualizuje zv√Ωraznƒõn√≠ aktu√°ln√≠ho ƒçasu"""
        datum = self.kalendar.date().toPython()
        current_time = datetime.now().time()
        # Pro testov√°n√≠ m≈Ø≈æete pou≈æ√≠t simulovan√Ω ƒças:
        # current_time = datetime.strptime("13:10", "%H:%M").time()
        
        for mistnost, tabulka in self.tabulky.items():
            for row in range(tabulka.rowCount()):
                cas_item = tabulka.item(row, 0)
                if cas_item:
                    cas_str = cas_item.text()
                    if cas_str:
                        try:
                            # Parsujeme ƒças z bu≈àky
                            cas = datetime.combine(datum, datetime.strptime(cas_str, "%H:%M").time())
                            
                            # Urƒç√≠me d√©lku slotu (stejn√° logika jako v nacti_rezervace)
                            if cas.time() >= datetime.strptime("09:00", "%H:%M").time() and cas.time() <= datetime.strptime("09:45", "%H:%M").time():
                                slot = timedelta(minutes=15)
                            elif cas.time() >= datetime.strptime("12:00", "%H:%M").time() and cas.time() < datetime.strptime("12:30", "%H:%M").time():
                                slot = timedelta(minutes=30)
                            elif cas.time() >= datetime.strptime("12:30", "%H:%M").time() and cas.time() < datetime.strptime("12:40", "%H:%M").time():
                                slot = timedelta(minutes=10)
                            elif cas.time() == datetime.strptime("12:40", "%H:%M").time():
                                slot = timedelta(minutes=20)
                            elif cas.time() >= datetime.strptime("16:00", "%H:%M").time() and cas.time() <= datetime.strptime("16:30", "%H:%M").time():
                                slot = timedelta(minutes=15)
                            elif cas.time() == datetime.strptime("16:45", "%H:%M").time():
                                slot = timedelta(minutes=35)
                            elif cas.time() >= datetime.strptime("17:20", "%H:%M").time():
                                slot = timedelta(minutes=20)
                            else:
                                slot = timedelta(minutes=20)
                            
                            slot_start_time = cas.time()
                            slot_end_time = (cas + slot).time()
                            
                            # Zkontrolujeme, zda aktu√°ln√≠ ƒças spad√° do tohoto slotu
                            if slot_start_time <= current_time < slot_end_time:
                                # Zv√Ωrazn√≠me aktu√°ln√≠ ƒças
                                from PySide6.QtGui import QFont
                                font = QFont()
                                font.setBold(True)
                                font.setPointSize(10)
                                cas_item.setFont(font)
                            else:
                                # Odebereme zv√Ωraznƒõn√≠ z ostatn√≠ch ƒças≈Ø
                                from PySide6.QtGui import QFont
                                font = QFont()
                                font.setBold(False)
                                font.setPointSize(10)
                                cas_item.setFont(font)
                                
                        except ValueError:
                            # Pokud se nepoda≈ô√≠ parsovat ƒças, ignorujeme
                            continue
        
    def povol_vyber_casu(self):
      def only_first_column_selection():
          for tabulka in self.tabulky.values():
              #tabulka.setEditTriggers(QTableWidget.AllEditTriggers)  # Zak√°zat editaci bunƒõk
              selected = tabulka.selectedItems()
              for item in selected:
                  if item.column() != 0:
                      item.setSelected(False)
  
      for tabulka in self.tabulky.values():
          tabulka.setSelectionMode(QTableWidget.MultiSelection)
          tabulka.setSelectionBehavior(QTableWidget.SelectRows)
          tabulka.itemSelectionChanged.connect(only_first_column_selection)
          # Nastav ≈ælutou barvu v√Ωbƒõru
          tabulka.setStyleSheet("""
              QTableWidget {
                  selection-background-color: yellow;
                  selection-color: black;
              }
          """)
      self.status_bar.showMessage("Vyber ƒçasy pouze v prvn√≠m sloupci ordinace a pokraƒçuj tlaƒç√≠tkem Pl√°nov√°n√≠ ordinac√≠, kde n√°slednƒõ Vyber doktora.")
      self.naplanovat_doktora = QAction("Vyber doktora", self) # Tlaƒç√≠tko pro v√Ωbƒõr doktora
      self.zrusit_vybrane = QAction("Zru≈°it vybran√Ω ƒças doktora", self) # Tlaƒç√≠tko pro zru≈°en√≠ v√Ωbƒõru doktora
      self.zrusit_vybrane.triggered.connect(self.zrus_vybrany_cas_doktora) # P≈ôid√°n√≠ akce pro zru≈°en√≠ v√Ωbƒõru
      self.ukoncit_planovani_doktora = QAction("Ukonƒçit pl√°nov√°n√≠", self) # Tlaƒç√≠tko pro ukonƒçen√≠ pl√°nov√°n√≠
      self.naplanovat_doktora.triggered.connect(self.uloz_vybrany_cas_doktora) # P≈ôid√°n√≠ akce pro ulo≈æen√≠ vybran√Ωch ƒças≈Ø a ordinace
      # self.zrusit_vybrane.triggered.connect(self.zrus_vybrany_cas_doktora) # P≈ôid√°n√≠ akce pro ulo≈æen√≠ vybran√Ωch ƒças≈Ø a ordinace
      self.ukoncit_planovani_doktora.triggered.connect(self.zrus_planovani) # Zru≈°en√≠ pl√°nov√°n√≠ ordinac√≠ a odstranƒõn√≠ tlaƒç√≠tka
      self.plan_menu.addAction(self.naplanovat_doktora) # P≈ôid√°n√≠ tlaƒç√≠tka pro v√Ωbƒõr doktora
      self.plan_menu.addAction(self.zrusit_vybrane) # P≈ôid√°n√≠ tlaƒç√≠tka pro v√Ωbƒõr doktora
      self.plan_menu.addAction(self.ukoncit_planovani_doktora) # P≈ôid√°n√≠ tlaƒç√≠tka pro ukonƒçen√≠ pl√°nov√°n√≠ ordinac√≠

    def zrus_vybrany_cas_doktora(self):
        # Z√≠sk√°n√≠ vybran√Ωch ƒças≈Ø a ordinace a ulo≈æen√≠ do datab√°ze
        all_doctors_colors = [ color[0] for color in get_all_doctors_colors()]
        barvy_puvodnich = []        
        vybrane_casy = []
        mistnost = None
        barva = None
        for m, tabulka in self.tabulky.items():
            for item in tabulka.selectedItems():
                #print(item.text(), item.row(), item.column())
                if item.column() == 0:
                  vybrane_casy.append(item.text())
                  mistnost = m  # Ulo≈æen√≠ ordinace, pokud je vybr√°n ƒças
                  
                  # Z√≠sk√°n√≠ barev doktor≈Ø z UserRole (ulo≈æen√© pro TimeCellDelegate)
                  doctor_colors = item.data(Qt.UserRole)
                  if doctor_colors and isinstance(doctor_colors, list):
                      for barva in doctor_colors:
                          if barva in all_doctors_colors and barva not in barvy_puvodnich:
                              barvy_puvodnich.append(barva)
        
        # Ulo≈æen√≠ do datab√°ze
        datum = self.kalendar.date().toPython()
        
        # Check if there are selected times before proceeding
        if not vybrane_casy:
            self.status_bar.showMessage("≈Ω√°dn√© ƒçasy nejsou vybran√©.")
            return
            
        if not barvy_puvodnich:
            self.status_bar.showMessage("≈Ω√°dn√Ω doktor nen√≠ vybr√°n.")
            return
            
        uprav_ordinacni_cas(barvy_puvodnich=barvy_puvodnich, datum=datum, prace_od=vybrane_casy[0], prace_do=vybrane_casy[-1], nazev_ordinace=mistnost)
        self.status_bar.showMessage("Pl√°nov√°n√≠ ulo≈æeno. Pokraƒçuj v pl√°nov√°n√≠ ordinac√≠, nebo jej ukonƒçi.")
        # Vypnut√≠ v√Ωbƒõru a odstranƒõn√≠ tlaƒç√≠tka
        for tabulka in self.tabulky.values():
            tabulka.clearSelection()  # Odznaƒç√≠ v≈°echny vybran√© ≈ô√°dky/bu≈àky
            self.nacti_rezervace()  # Naƒçten√≠ rezervac√≠ pro obnoven√≠ p≈Øvodn√≠ho stavu tabulek
        
    def zrus_planovani(self):
        # Zru≈°en√≠ pl√°nov√°n√≠ a odstranƒõn√≠ tlaƒç√≠tka
        self.is_planning_active = False  # Obnovit auto-refresh
        self.status_bar.showMessage("Ukonƒçeno pl√°nov√°n√≠ ordinac√≠.")
        self.menu_bar.removeAction(self.plan_menu.menuAction())  # Odstranƒõn√≠ Pl√°nov√°n√≠ z menu
        self.update_user_menu() # P≈ôidat user menu zpƒõt
        for tabulka in self.tabulky.values():
            tabulka.setSelectionMode(QTableWidget.NoSelection)
            tabulka.clearSelection()
            #self.dokoncit_planovani_btn.deleteLater()
            #self.vyber_doktora_btn.deleteLater() 
            self.nacti_rezervace()  # Naƒçten√≠ rezervac√≠ pro obnoven√≠ p≈Øvodn√≠ho stavu tabulek   
    
    def uloz_vybrany_cas_doktora(self):
        # Z√≠sk√°n√≠ vybran√Ωch ƒças≈Ø a ordinace a ulo≈æen√≠ do datab√°ze
        all_doctors_colors = [ color[0] for color in get_all_doctors_colors()]
        match_doctor_colors = []        
        vybrane_casy = []
        mistnost = None
        barva = None
        for m, tabulka in self.tabulky.items():
            for item in tabulka.selectedItems():
                #print(item.text(), item.row(), item.column())
                if item.column() == 0:
                  vybrane_casy.append(item.text())
                  mistnost = m  # Ulo≈æen√≠ ordinace, pokud je vybr√°n ƒças
                  # vybrane_casy.append((m, item.text()))
                  doktor_item = tabulka.item(item.row(), 1)
                  # Z√≠sk√°n√≠ barvy doktora z bu≈àky    
                  if doktor_item:
                    barva = doktor_item.background().color().name()
                    if barva in all_doctors_colors:
                      if not barva in match_doctor_colors:
                        match_doctor_colors.append(barva)
        dialog = VyberDoktoraDialog(self)
        self.register_dialog(dialog)
        if dialog.exec():
            new_reservace_doktor = dialog.get_selected()
            
            # Ulo≈æen√≠ do datab√°ze
            datum = self.kalendar.date().toPython()
            
            uloz_nebo_uprav_ordinacni_cas(new_reservace_doktor, match_doctor_colors ,datum, vybrane_casy[0],vybrane_casy[-1], mistnost)
            self.status_bar.showMessage("Pl√°nov√°n√≠ ulo≈æeno. Pokraƒçuj v pl√°nov√°n√≠ ordinac√≠, nebo jej ukonƒçi.")
        # Vypnut√≠ v√Ωbƒõru a odstranƒõn√≠ tlaƒç√≠tka
        for tabulka in self.tabulky.values():
            tabulka.clearSelection()  # Odznaƒç√≠ v≈°echny vybran√© ≈ô√°dky/bu≈àky
            self.nacti_rezervace()  # Naƒçten√≠ rezervac√≠ pro obnoven√≠ p≈Øvodn√≠ho stavu tabulek
    
    def zobraz_kontextove_menu(self, mistnost, position):
        """P≈ô√≠mo otev≈ôe dialog pro zmƒõnu stavu pacienta p≈ôi kliknut√≠ prav√Ωm tlaƒç√≠tkem"""
        if self.logged_in_user_role not in ["admin", "supervisor", "user"]:
            return
            
        tabulka = self.tabulky[mistnost]
        item = tabulka.itemAt(position)
        
        if item is None:
            return
            
        row = item.row()
        col = item.column()
        
        # Zkontroluj, jestli je v bu≈àce rezervace (sloupec 1)
        if col != 1:
            return
            
        data_item = tabulka.item(row, 1)
        data_str = data_item.text() if data_item else ""
        
        # Zkontroluj, jestli je v bu≈àce rezervace (ne pr√°zdn√° bu≈àka)
        if not data_str.strip():
            return
            
        # Najdi rezervaci v datech
        reservation_data = self.najdi_rezervaci_pro_radek(mistnost, row)
        if reservation_data is None:
            return
            
        # P≈ô√≠mo otev≈ôi dialog pro zmƒõnu stavu
        self.zmenit_stav_pacienta(reservation_data)
    
    def najdi_rezervaci_pro_radek(self, mistnost, row):
        """Najde rezervaci podle ≈ô√°dku v tabulce"""
        datum = self.kalendar.date().toPython()
        rezervace_dne = ziskej_rezervace_dne(datum.strftime("%Y-%m-%d"))
        
        tabulka = self.tabulky[mistnost]
        cas_item = tabulka.item(row, 0)
        cas_str = cas_item.text() if cas_item else ""
        
        if not cas_str:
            return None
            
        # P≈ôeveƒè ƒças z bu≈àky na datetime pro porovn√°n√≠
        cas_slot = datetime.strptime(cas_str, "%H:%M").time()
        
        # Najdi rezervaci, kter√° odpov√≠d√° ƒçasu a ordinaci
        for rez in rezervace_dne:
            if rez[8] == mistnost:  # Spr√°vn√° ordinace
                # rez[10] je cas_od, rez[11] je cas_do
                cas_od = datetime.strptime(rez[10], "%H:%M").time() if isinstance(rez[10], str) else rez[10]
                cas_do = datetime.strptime(rez[11], "%H:%M").time() if isinstance(rez[11], str) else rez[11]
                
                # Zkontroluj, jestli ƒças slotu spad√° do rezervace
                if cas_od <= cas_slot < cas_do or cas_od == cas_slot:
                    return rez
        return None
    
    def zmenit_stav_pacienta(self, reservation_data):
        """Otev≈ôe dialog pro zmƒõnu stavu pacienta"""
        dialog = PatientStatusDialog(reservation_data, self)
        if dialog.exec() == QDialog.Accepted:
            selected_status = dialog.get_selected_status()
            # Zmƒõna: zpracov√°v√°me i hodnotu None
            rezervace_id = reservation_data[1]  # ID rezervace
            
            if aktualizuj_stav_rezervace(rezervace_id, selected_status):
                # Force refresh dat - mal√© zpo≈ædƒõn√≠ pro synchronizaci datab√°ze
                QTimer.singleShot(100, self.nacti_rezervace)
                status_text = "nulov√°n" if selected_status is None else selected_status
                # QMessageBox.information(self, "√öspƒõch", f"Stav pacienta byl zmƒõnƒõn na: {status_text}")
            else:
                QMessageBox.warning(self, "Chyba", "Nepoda≈ôilo se aktualizovat stav pacienta")

    def zpracuj_dvojklik(self, mistnost, row, col):
      if self.logged_in_user_role in ["admin", "supervisor", "user"]:
        tabulka = self.tabulky[mistnost]
        cas_item = tabulka.item(row, 0)
        data_item = tabulka.item(row, 1)
        cas_str = cas_item.text() if cas_item else ""
        data_str = data_item.text() if data_item else ""

        if not cas_str:
            return

        datum = self.kalendar.date().toPython()
        slot_start = datetime.combine(datum, datetime.strptime(cas_str, "%H:%M").time())

        # --- Zjisti jm√©no a barvu doktora podle rozvrhu ---
        rezervace_doktoru = ziskej_rozvrh_doktoru_dne(datum.strftime("%Y-%m-%d"))
        doktor_jmeno = ""
        for r in rezervace_doktoru:
            # r = (id, jmeno, barva, datum, od, do, ordinace)
            if r[6] == mistnost:
                od = datetime.strptime(r[4], "%H:%M").time()
                do = datetime.strptime(r[5], "%H:%M").time()
                if od <= slot_start.time() <= do:
                    doktor_jmeno = r[1]
                    break
                  
        # Zjisti d√©lku slotu stejnƒõ jako v nacti_rezervace
        if slot_start.time() >= datetime.strptime("09:00", "%H:%M").time() and slot_start.time() <= datetime.strptime("09:45", "%H:%M").time():
            slot = timedelta(minutes=15)
        elif slot_start.time() >= datetime.strptime("12:00", "%H:%M").time() and slot_start.time() < datetime.strptime("12:30", "%H:%M").time():
            slot = timedelta(minutes=30)
        elif slot_start.time() >= datetime.strptime("12:30", "%H:%M").time() and slot_start.time() < datetime.strptime("12:40", "%H:%M").time():
            slot = timedelta(minutes=10)
        elif slot_start.time() == datetime.strptime("12:40", "%H:%M").time():
            slot = timedelta(minutes=20)
        elif slot_start.time() >= datetime.strptime("16:00", "%H:%M").time() and slot_start.time() <= datetime.strptime("16:30", "%H:%M").time():
            slot = timedelta(minutes=15)
        elif slot_start.time() == datetime.strptime("16:45", "%H:%M").time():
            slot = timedelta(minutes=35)
        elif slot_start.time() >= datetime.strptime("17:20", "%H:%M").time():
            slot = timedelta(minutes=20)
        else:
            slot = timedelta(minutes=20)


        if not data_str.strip():
          # P≈ôedvypl≈à ƒças, ordinaci a doktora
          self.formular = FormularRezervace(
              self,
              predvyplneny_cas=f"{datum.strftime('%Y-%m-%d')} {cas_str}",
              predvyplnena_ordinace=mistnost,
              predvyplneny_doktor=doktor_jmeno  # <-- p≈ôidej tento parametr
          )
          self.register_dialog(self.formular)  # Zaregistruj dialog
          self.center_dialog_on_screen(self.formular)
          self.formular.show()
        else:
            # ...p≈Øvodn√≠ logika pro otev≈ôen√≠ existuj√≠c√≠ rezervace...
            rezervace = ziskej_rezervace_dne(datum.strftime("%Y-%m-%d"))
            for r in rezervace:
                # Handle both datetime object (PostgreSQL) and string (SQLite) formats for r[0]
                if isinstance(r[0], datetime):
                    # PostgreSQL returns datetime objects
                    datum_str = r[0].strftime("%Y-%m-%d")
                else:
                    # SQLite returns strings
                    datum_str = str(r[0])
                    
                rez_cas = datetime.strptime(f"{datum_str} {r[10]}", "%Y-%m-%d %H:%M")
                if r[8] == mistnost and slot_start <= rez_cas < slot_start + slot:
                    self.formular = FormularRezervace(self, rezervace_data=r)
                    self.register_dialog(self.formular)  # Zaregistruj dialog
                    self.center_dialog_on_screen(self.formular)
                    self.formular.show()
                    break    

    def aktualizuj_format_kalendare(self, datum):
        locale = QLocale(QLocale.Czech)
        den = locale.dayName(datum.dayOfWeek(), QLocale.LongFormat)
        self.kalendar.setDisplayFormat(f"'{den} 'd.M.yyyy")

    def predchozi_den(self):
        self.kalendar.setDate(self.kalendar.date().addDays(-1))

    def nasledujici_den(self):
        self.kalendar.setDate(self.kalendar.date().addDays(1))

    def nacti_rezervace(self):
      datum = self.kalendar.date().toPython()
      rezervace = ziskej_rezervace_dne(datum.strftime("%Y-%m-%d"))
      rezervace_doktoru = ziskej_rozvrh_doktoru_dne(datum.strftime("%Y-%m-%d"))
      ordinace = get_ordinace_list()
      
      # Vyma≈æ v≈°echny tabulky
      for tabulka in self.tabulky.values():
          tabulka.setRowCount(0)

      # Zmapuj rezervace podle ordinace
      mapovane = {i: [] for i in ordinace}
      for r in rezervace:
          try:
              # Handle both datetime object (PostgreSQL) and string (SQLite) formats for r[0]
              if isinstance(r[0], datetime):
                  # PostgreSQL returns datetime objects
                  datum_str = r[0].strftime("%Y-%m-%d")
              else:
                  # SQLite returns strings
                  datum_str = str(r[0])
                  
              # Combine date and time properly
              cas_od = datetime.strptime(f"{datum_str} {r[10]}", "%Y-%m-%d %H:%M")
              cas_do = datetime.strptime(f"{datum_str} {r[11]}", "%Y-%m-%d %H:%M")
              
              id = r[1]
              doktor = r[2] if r[2] else None  # M≈Ø≈æe b√Ωt null
              doktor_color = r[3] if r[3] else None  # M≈Ø≈æe b√Ωt null
              pacient = r[4] if r[4] else ""
              majitel = r[5] if r[5] else ""
              kontakt = r[6] if r[6] else ""
              druh = r[7] if r[7] else ""
              mistnost = r[8] if r[8] else ""
              poznamka = r[9] if r[9] else ""
              anestezie = r[12] if r[12] == True else None
              druhy_doktor = f"{r[13]}" if r[13] is not None else None
              barva_druhy_doktor = r[14] if r[14] is not None else None
              stav = r[15] if len(r) > 15 else None  # Stav rezervace
              

              if mistnost and mistnost in mapovane:
                  mapovane[mistnost].append((cas_od, cas_do, id, doktor, doktor_color, pacient, majitel, kontakt, druh, poznamka, anestezie, druhy_doktor, barva_druhy_doktor, stav))
          except (ValueError, IndexError, AttributeError) as e:
              # Pokud je probl√©m s form√°tem dat rezervace, p≈ôeskoƒç ji
              print(f"Chyba p≈ôi zpracov√°n√≠ rezervace: {e}")
              continue
          
      # Vlo≈æ data do tabulek
      for mistnost, tabulka in self.tabulky.items():
          # Tabulka u≈æ m√° vlastn√≠ slouƒçenou hlaviƒçku, nastav√≠me pr√°zdn√© labely
          tabulka.setHorizontalHeaderLabels(["", ""])
          
          # Slouƒç√≠me dvƒõ bu≈àky hlaviƒçky do jedn√©
          header = tabulka.horizontalHeader()
          header.setSectionResizeMode(0, header.ResizeMode.Interactive)
          header.setSectionResizeMode(1, header.ResizeMode.Stretch)
          header.resizeSection(1, 1)  # Skryjeme druhou sekci hlaviƒçky

          
          index = 0
          cas = datetime.combine(datum, datetime.strptime("08:00", "%H:%M").time())
          end = datetime.combine(datum, datetime.strptime("20:00", "%H:%M").time())
          
          rozvrh_doktoru_map = {}
          # Bezpeƒçnƒõ zpracuj rezervace doktor≈Ø - m≈Ø≈æe b√Ωt pr√°zdn√©
          if rezervace_doktoru:
              for r in rezervace_doktoru:
                  if r and len(r) > 6:  # Zkontroluj, ≈æe z√°znam m√° v≈°echny pot≈ôebn√© polo≈æky
                      ordinace_nazev = r[6]
                      if ordinace_nazev not in rozvrh_doktoru_map:
                          rozvrh_doktoru_map[ordinace_nazev] = []
                      rozvrh_doktoru_map[ordinace_nazev].append(r)    
          
          while cas <= end:
              pause_time = False
              vaccination_time = False
              
              # Nastav slot podle ƒçasu
              if cas.time() >= datetime.strptime("09:00", "%H:%M").time() and cas.time() <= datetime.strptime("09:45", "%H:%M").time():
                  slot = timedelta(minutes=15)
                  vaccination_time = True
              elif cas.time() >= datetime.strptime("12:00", "%H:%M").time() and cas.time() < datetime.strptime("12:30", "%H:%M").time():
                slot = timedelta(minutes=30)
                pause_time = True
              elif cas.time() >= datetime.strptime("12:30", "%H:%M").time() and cas.time() < datetime.strptime("12:40", "%H:%M").time():
                slot = timedelta(minutes=10)
              elif cas.time() == datetime.strptime("12:40", "%H:%M").time():
                slot = timedelta(minutes=20)
              elif cas.time() >= datetime.strptime("16:00", "%H:%M").time() and cas.time() <= datetime.strptime("16:30", "%H:%M").time():
                  slot = timedelta(minutes=15)
                  vaccination_time = True
              elif cas.time() == datetime.strptime("16:45", "%H:%M").time():
                slot = timedelta(minutes=35)
                pause_time = True
              elif cas.time() >= datetime.strptime("17:20", "%H:%M").time():
                  slot = timedelta(minutes=20)
              else:
                  slot = timedelta(minutes=20)
                  
              cas_str = cas.strftime("%H:%M")
              tabulka.insertRow(index)
              
              # Kontrola rozvrhu doktora
              doktor_bg_color = "#ffffff"
              doktor_jmeno = ""
              if mistnost in rozvrh_doktoru_map and rozvrh_doktoru_map[mistnost]:
                  for r in rozvrh_doktoru_map[mistnost]:
                      try:
                          if r and len(r) > 5:  # Zkontroluj, ≈æe z√°znam m√° v≈°echny pot≈ôebn√© polo≈æky
                              od = datetime.strptime(r[4], "%H:%M").time()
                              do = datetime.strptime(r[5], "%H:%M").time()
                              if od <= cas.time() <= do:
                                doktor_active = get_doktor_isactive_by_color(r[2])
                                if doktor_active == 1:
                                  doktor_bg_color = r[2].strip() if r[2] else "#ffffff"
                                  doktor_jmeno = r[1] if r[1] else ""
                                  break
                      except (ValueError, IndexError, AttributeError) as e:
                          # Pokud je probl√©m s form√°tem dat, pokraƒçuj bez chyby
                          continue
                        
              # Najdi rezervace, kter√© zasahuj√≠ do aktu√°ln√≠ho slotu
              rezervace_pro_cas = []
              for rez in mapovane[mistnost]:
                  cas_od, cas_do = rez[0], rez[1]
                  slot_end = cas + slot
                  
                  # Univerz√°ln√≠ logika pro v≈°echny typy rezervac√≠
                  # Rezervace zasahuje do slotu pokud:
                  # zaƒç√°tek rezervace < konec slotu AND konec rezervace >= zaƒç√°tek slotu
                  if cas_od < slot_end and cas_do >= cas:
                      rezervace_pro_cas.append(rez)
              
              # Vytvo≈ô cas_item s barvami doktor≈Ø z rezervac√≠ i z rozvrhu
              cas_item = QTableWidgetItem(cas_str)
              
              # Zv√Ωrazni aktu√°ln√≠ ƒças tuƒçn√Ωm p√≠smem ve slotech ordinac√≠
              current_time = datetime.now().time()
              #current_time = datetime.strptime("13:10", "%H:%M").time()
              slot_start_time = cas.time()
              slot_end_time = (cas + slot).time()
              
              # Pokud aktu√°ln√≠ ƒças spad√° do tohoto ƒçasov√©ho slotu, zv√Ωrazni ho
              if slot_start_time <= current_time < slot_end_time:
                  from PySide6.QtGui import QFont
                  font = QFont()
                  font.setBold(True)
                  font.setPointSize(10)  # Trochu vƒõt≈°√≠ p√≠smo pro aktu√°ln√≠ ƒças
                  cas_item.setFont(font)
              
              # Shroma≈ædi barvy doktor≈Ø z rezervac√≠ pro tento ƒças
              doctor_colors = []
              for rez in rezervace_pro_cas:
                  # Pro ka≈ædou rezervaci p≈ôidej doktory ve spr√°vn√©m po≈ôad√≠
                  # Prvn√≠ doktor (index 4 je doktor_color)
                  if rez[4] and rez[4].strip():
                      if rez[4].strip() not in doctor_colors:  # Prevence duplicit
                          doctor_colors.append(rez[4].strip())
                  # Druh√Ω doktor (index 12 je barva_druhy_doktor) - pouze pokud je≈°tƒõ nem√°me 2 doktory
                  if len(doctor_colors) < 2 and len(rez) > 12 and rez[12] and rez[12].strip():
                      if rez[12].strip() not in doctor_colors:  # Prevence duplicit
                          doctor_colors.append(rez[12].strip())
                  
                  # Pokud u≈æ m√°me 2 doktory, ukonƒç√≠me
                  if len(doctor_colors) >= 2:
                      break
              
              # Pokud nejsou rezervace, ale je napl√°novan√Ω doktor (rozvrh), p≈ôidej jeho barvu
              if not doctor_colors and doktor_bg_color and doktor_bg_color != "#ffffff":
                  doctor_colors.append(doktor_bg_color)
              
              # Ulo≈æ barvy do UserRole pro delegate
              cas_item.setData(Qt.UserRole, doctor_colors)
              
              tabulka.setItem(index, 0, cas_item)
              doktor_item = QTableWidgetItem("")
              
              tabulka.setItem(index, 1, doktor_item)

              # Vlo≈æ data rezervace
              if rezervace_pro_cas:
                for rez in rezervace_pro_cas:
                  cas_item = QTableWidgetItem(cas_str)
                  
                  # Zv√Ωrazni aktu√°ln√≠ ƒças tuƒçn√Ωm p√≠smem i v rezervovan√Ωch slotech
                  current_time = datetime.now().time()
                  #current_time = datetime.strptime("13:20", "%H:%M").time()
                  slot_start_time = cas.time()
                  slot_end_time = (cas + slot).time()
                  
                  # Pokud aktu√°ln√≠ ƒças spad√° do tohoto ƒçasov√©ho slotu, zv√Ωrazni ho
                  if slot_start_time <= current_time < slot_end_time:
                      from PySide6.QtGui import QFont
                      font = QFont()
                      font.setBold(True)
                      font.setPointSize(10)  # Sjednocen√° velikost p√≠sma
                      cas_item.setFont(font)
                  
                  # Shroma≈ædi barvy doktor≈Ø z t√©to konkr√©tn√≠ rezervace
                  doctor_colors = []
                  # Prvn√≠ doktor (index 4 je doktor_color) - v≈ædy prvn√≠ pozice
                  if rez[4] and rez[4].strip():
                      doctor_colors.append(rez[4].strip())
                  # Druh√Ω doktor (index 12 je barva_druhy_doktor) - v≈ædy druh√° pozice
                  if len(rez) > 12 and rez[12] and rez[12].strip():
                      doctor_colors.append(rez[12].strip())
                  
                  # Ulo≈æ barvy do UserRole pro delegate
                  cas_item.setData(Qt.UserRole, doctor_colors)
                  
                  # Nastav spr√°vn√© pozad√≠ pro ƒças (priorita: vakcinace > pauza > ≈°ed√Ω pruh)
                  if vaccination_time:
                      cas_item.setBackground(QColor(vaccination_color))
                  elif pause_time:
                      cas_item.setBackground(QColor(pause_color))
                  elif index % 2 == 0:
                      cas_item.setBackground(QColor(table_grey_strip))
                  
                  tabulka.setItem(index, 0, cas_item)
                  
                  # Zobraz ƒças od-do pro v√≠ce≈ô√°dkov√© rezervace
                  cas_od_str = rez[0].strftime("%H:%M")
                  cas_do_str = rez[1].strftime("%H:%M")
                  
                  
                  # Logika pro zobrazen√≠ rezervac√≠ p≈ôes v√≠ce slot≈Ø
                  if rez[0] < rez[1]:  # Rezervace trv√° v√≠ce ne≈æ jeden slot
                      # Najdi v≈°echny sloty t√©to rezervace v aktu√°ln√≠ ordinaci
                      sloty_rezervace = []
                      for r in mapovane[mistnost]:
                          if r[2] == rez[2]:  # Stejn√© ID rezervace
                              cas_r_od, cas_r_do = r[0], r[1]
                              # Projdi v≈°echny sloty a najdi ty, kter√© pat≈ô√≠ k t√©to rezervaci
                              temp_cas = datetime.combine(datum, datetime.strptime("08:00", "%H:%M").time())
                              temp_end = datetime.combine(datum, datetime.strptime("20:00", "%H:%M").time())
                              while temp_cas <= temp_end:
                                  # Nastav temp_slot podle ƒçasu (stejn√° logika jako v√Ω≈°e)
                                  if temp_cas.time() >= datetime.strptime("09:00", "%H:%M").time() and temp_cas.time() <= datetime.strptime("09:45", "%H:%M").time():
                                      temp_slot = timedelta(minutes=15)
                                  elif temp_cas.time() >= datetime.strptime("12:00", "%H:%M").time() and temp_cas.time() < datetime.strptime("12:30", "%H:%M").time():
                                      temp_slot = timedelta(minutes=30)
                                  elif temp_cas.time() >= datetime.strptime("12:30", "%H:%M").time() and temp_cas.time() < datetime.strptime("12:40", "%H:%M").time():
                                      temp_slot = timedelta(minutes=10)
                                  elif temp_cas.time() == datetime.strptime("12:40", "%H:%M").time():
                                      temp_slot = timedelta(minutes=20)
                                  elif temp_cas.time() >= datetime.strptime("16:00", "%H:%M").time() and temp_cas.time() <= datetime.strptime("16:30", "%H:%M").time():
                                      temp_slot = timedelta(minutes=15)
                                  elif temp_cas.time() == datetime.strptime("16:45", "%H:%M").time():
                                      temp_slot = timedelta(minutes=35)
                                  elif temp_cas.time() >= datetime.strptime("17:20", "%H:%M").time():
                                      temp_slot = timedelta(minutes=20)
                                  else:
                                      temp_slot = timedelta(minutes=20)
                                  
                                  temp_slot_end = temp_cas + temp_slot
                                  if cas_r_od < temp_slot_end and cas_r_do >= temp_cas:
                                      sloty_rezervace.append(temp_cas)
                                  temp_cas += temp_slot
                              break
                      
                      # Zjisti pozici aktu√°ln√≠ho slotu v seznamu slot≈Ø rezervace
                      if cas in sloty_rezervace:
                          pozice = sloty_rezervace.index(cas)
                          if pozice == 0:
                              # Prvn√≠ slot - zobraz pln√© informace
                              display_text = f"{rez[6]}: {rez[8]} - {rez[5]}"
                          elif pozice == len(sloty_rezervace) - 1:
                              # Posledn√≠ slot - zobraz pln√© informace
                              display_text = f"{rez[6]}: {rez[8]} - {rez[5]}"
                          else:
                              # St≈ôedn√≠ slot - zobraz pouze ƒç√°rky
                              display_text = "---"
                      else:
                          # Fallback - zobraz pln√© informace
                          display_text = f"{rez[6]}: {rez[8]} - {rez[5]}"
                  else:
                      # Rezervace v jedin√©m slotu - zobraz pln√© informace
                      display_text = f"{rez[6]}: {rez[8]} - {rez[5]}"
                  
                  doktor_item = QTableWidgetItem(display_text)
                  font = doktor_item.font()
                  
                  # Nastav styl textu podle stavu rezervace
                  stav = rez[13] if len(rez) > 13 else None  # Stav rezervace (index 13 v nov√©m tuple)
                  
                  if stav == "odbaven":
                      # ≈†krtl√Ω ≈°ed√Ω text pro odbaven√© pacienty
                      font.setStrikeOut(True)
                      font.setBold(False)  # Ne tuƒçn√Ω
                      doktor_item.setForeground(QColor("#888888"))  # ≈†ed√Ω text
                  elif stav == "ceka":
                      # ƒåern√Ω tuƒçn√Ω text pro ƒçekaj√≠c√≠ pacienty
                      font.setBold(True)  # Tuƒçn√Ω pouze pro "ceka"
                      doktor_item.setForeground(QColor("#000000"))  # ƒåern√Ω text
                  else:
                      # Svƒõtle ≈°ed√Ω text pro rezervace bez stavu (null)
                      font.setBold(False)  # Ne tuƒçn√Ω
                      doktor_item.setForeground(QColor("#888888"))  # ≈†ed√Ω text
                  
                  doktor_item.setFont(font)
                  
                  # Nastav spr√°vn√© pozad√≠ pro rezervaci (priorita: barva doktora > pauza > ≈°ed√Ω pruh)
                  if rez[10] == True:  # Pokud je anestezie
                      doktor_item.setBackground(QColor(anesthesia_color)) # Barva pro anestezii
                  elif pause_time:
                      doktor_item.setBackground(QColor(pause_color))
                  elif index % 2 == 0:
                      doktor_item.setBackground(QColor(table_grey_strip))
                  
                  # P≈ôidej vizu√°ln√≠ oznaƒçen√≠ pro v√≠ce≈ô√°dkov√© rezervace
                  if rez[0] < rez[1]:  # Rezervace trv√° v√≠ce ne≈æ jeden slot
                      # Zjisti pozici slotu v rezervaci (pou≈æij u≈æ vypoƒç√≠tan√© hodnoty)
                      if cas in sloty_rezervace:
                          pozice = sloty_rezervace.index(cas)
                          total_sloty = len(sloty_rezervace)
                          
                          # P≈ôidej vizu√°ln√≠ oznaƒçen√≠ pro v√≠ce≈ô√°dkov√© rezervace
                          if total_sloty > 1:
                              # P≈ôidej prefix k textu pro oznaƒçen√≠ pozice
                              current_text = doktor_item.text()
                              if pozice == 0:
                                  # Prvn√≠ slot - p≈ôidej horn√≠ znaƒçku
                                  doktor_item.setText(f"‚îå‚îÄ {current_text}")
                              elif pozice == total_sloty - 1:
                                  # Posledn√≠ slot - p≈ôidej doln√≠ znaƒçku
                                  doktor_item.setText(f"‚îî‚îÄ {current_text}")
                              else:
                                  # St≈ôedn√≠ slot - p≈ôidej boƒçn√≠ znaƒçku
                                  if current_text == "---":
                                      doktor_item.setText("‚îÇ  ---")
                                  else:
                                      doktor_item.setText(f"‚îÇ  {current_text}")
                  
                  tabulka.setItem(index, 1, doktor_item)
                  
                  # Tooltip s detaily - o≈°et≈ôit p≈ô√≠pad kdy doktor m≈Ø≈æe b√Ωt null
                  doktor_display = rez[3] if rez[3] else "Nep≈ôi≈ôazen"
                  tooltip_html = f"""
                      <table style="background-color:  '#ffffff'; padding: 8px; border-radius: 6px; border: 3px solid #009688; font-family: Arial; font-size: 14px; color: #222; min-width: 250px; margin: 10px; border-collapse: collapse;">
                          <thead>
                          <tr><th colspan="2" style="text-align: center; font-weight: bold; font-size: 16px; padding: 4px; border-radius: 3px; margin-bottom: 8px;">
                            üë§ Majitel: {rez[6]}
                          </th></tr>
                          </thead>
                          <tbody>
                          <tr><td colspan="2" style="text-align: center; color: lightgrey">{40*"-"}</td></tr>
                          <tr><td>üêï Pacient</td><td style="font-weight: bold; padding-top:1px">{rez[5]}</td></tr>
                          <tr><td>üîó Druh:</td><td style="font-weight: bold; padding-top:1px">{rez[8]}</td></tr>
                          {'<tr><td>ü©∫ Doktor:</td><td style="font-weight: bold; padding-top:1px">' + doktor_display + '</td></tr>' if doktor_display != "None None" else ""}
                          {'<tr><td style="text-align: center; font-weight: bold; padding:1px 0">üíâ Anestezie</td></tr>' if rez[10] == True  else ""}
                          {'<tr><td>ü©∫ü©∫ Dokor:</td><td style="font-weight: bold; padding-top:1px">' + rez[11] + '</td></tr>' if rez[11]  else ""}
                          <tr><td>üï∞Ô∏è ƒåas:</td><td style="font-weight: bold; padding-top:1px">{cas_od_str} - {cas_do_str}</td></tr>
                          <tr><td>üìû Kontakt:</td><td style="font-weight: bold; padding-top:1px">{rez[7]}</td></tr>
                          <tr><td>üìù Pozn√°mka:</td><td style="font-weight: bold; padding-top:1px">{rez[9]}</td></tr>
                      </tbody>  
                      """
                  doktor_item.setToolTip(tooltip_html)

              # Nastaven√≠ pozad√≠ ≈ô√°dk≈Ø - pouze pokud nen√≠ rezervace
              if not rezervace_pro_cas:
                  for col in range(2):
                      if tabulka.item(index, col):  # Zkontroluj, ≈æe item existuje
                          # Priorita barev: vakcinace (pouze sloupec 0) > pauza > ≈°ed√Ω pruh (sud√© ≈ô√°dky)
                          if vaccination_time and col == 0:
                              tabulka.item(index, 0).setBackground(QColor(vaccination_color))
                          elif pause_time:
                              tabulka.item(index, col).setBackground(QColor(pause_color))
                          elif index % 2 == 0:
                              tabulka.item(index, col).setBackground(QColor(table_grey_strip))
                      
              index += 1
              cas += slot
      
      # Aplikuj optim√°ln√≠ v√Ω≈°ku ≈ô√°dk≈Ø po naƒçten√≠ dat
      self.apply_optimal_row_height()
      
      #print("Rezervace naƒçten√© z datab√°ze:", rezervace)
    
    def change_database(self):
        """Zobraz√≠ dialog pro zmƒõnu PostgreSQL datab√°ze."""
        
        reply = QMessageBox.question(
            self,
            "Zmƒõna datab√°ze",
            "Opravdu chcete zmƒõnit konfiguraci PostgreSQL datab√°ze?\n"
            "Aplikace se p≈ôipoj√≠ k nov√© datab√°zi po ulo≈æen√≠ nastaven√≠.",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            dialog = PostgreSQLSetupDialog(self)
            self.register_dialog(dialog)
            result = dialog.exec()
            
            if result == PostgreSQLSetupDialog.Accepted:
                if dialog.is_connection_successful():
                    QMessageBox.information(
                        self,
                        "√öspƒõch", 
                        "Konfigurace PostgreSQL datab√°ze byla √∫spƒõ≈°nƒõ zmƒõnƒõna.\n"
                        "P≈ôipojen√≠ k nov√© datab√°zi je funkƒçn√≠."
                    )
                    
                    # Aktualizuj zobrazen√≠ s novou datab√°z√≠
                    try:
                        self.aktualizuj_tabulku_ordinaci_layout()
                        self.aktualizuj_doktori_layout()
                        self.nacti_rezervace()
                    except Exception as e:
                        QMessageBox.warning(
                            self,
                            "Upozornƒõn√≠",
                            f"Datab√°ze byla zmƒõnƒõna, ale do≈°lo k chybƒõ p≈ôi aktualizaci zobrazen√≠:\n{str(e)}\n\n"
                            "Doporuƒçujeme restartovat aplikaci."
                        )
                else:
                    QMessageBox.warning(
                        self,
                        "Upozornƒõn√≠",
                        "Konfigurace byla ulo≈æena, ale test p≈ôipojen√≠ selhal.\n"
                        "Zkontrolujte nastaven√≠ a zkuste to znovu."
                    )
      
    def nastaveni_smazani_dat(self):
      """Zobraz√≠ dialog pro nastaven√≠ smaz√°n√≠ dat."""
      
      dialog = SmazRezervaceDialog(self)
      self.register_dialog(dialog)
      if dialog.exec():
          days_to_keep = dialog.get_days()
          if days_to_keep is not None:
              delete_after = dialog.set_days_to_keep()
              self.nacti_rezervace()
              if delete_after is not None:
                  # Zobraz √∫spƒõ≈°nou zpr√°vu
                  QMessageBox.information(
                      self,
                      "√öspƒõch",
                      f"Nastaven√≠ smaz√°n√≠ dat bylo √∫spƒõ≈°nƒõ aktualizov√°no.\nBylo smaz√°no {delete_after['pocet_smazanych']} rezervac√≠ star≈°√≠ch ne≈æ {delete_after['datum_hranice']}."
                  )
            
    def setup_icons(self):
        """Nastaven√≠ ikon pro aplikaci a okno."""
        import sys
        
        # Fix pro PyInstaller - spr√°vn√© urƒçen√≠ cesty k resources
        if getattr(sys, 'frozen', False):
            # Produkƒçn√≠ executable
            base_path = sys._MEIPASS
        else:
            # Development
            base_path = os.path.dirname(__file__)
        
        # Zkus naj√≠t ikonu v r≈Øzn√Ωch form√°tech a um√≠stƒõn√≠ch - cross-platform cesty
        icon_paths = [
            # ICO form√°t (Windows)
            os.path.join(base_path, "pictures", "karakal_logo_grey.ico"),
            os.path.join(base_path, "..", "pictures", "karakal_logo_grey.ico"),
            # PNG form√°t (fallback)
            os.path.join(base_path, "pictures", "karakal_logo_grey.png"),
            os.path.join(base_path, "..", "pictures", "karakal_logo_grey.png"),
            # Development fallback - cross-platform
            os.path.join(os.path.dirname(__file__), "..", "pictures", "karakal_logo_grey.ico"),
            os.path.join(os.path.dirname(__file__), "..", "pictures", "karakal_logo_grey.png"),
            os.path.join(os.path.dirname(os.path.dirname(__file__)), "pictures", "karakal_logo_grey.ico"),
            os.path.join(os.path.dirname(os.path.dirname(__file__)), "pictures", "karakal_logo_grey.png")
        ]
        
        app_icon = None
        icon_found = False
        
        for icon_path in icon_paths:
            if os.path.exists(icon_path):
                app_icon = QIcon(icon_path)
                if not app_icon.isNull():
                    icon_found = True
                    print(f"‚úÖ Ikona naƒçtena z: {icon_path}")
                    break
        
        if not icon_found:
            print(f"‚ùå Ikona nenalezena. Hled√°no v:")
            for path in icon_paths:
                print(f"   - {path} (exists: {os.path.exists(path)})")
            return
        
        if app_icon and not app_icon.isNull():
            # Nastaven√≠ ikony pro okno (lev√Ω horn√≠ roh)
            self.setWindowIcon(app_icon)
            
            # Nastaven√≠ ikony pro celou aplikaci (taskbar, Alt+Tab) - D≈ÆLE≈ΩIT√â PO≈òAD√ç
            app = QApplication.instance()
            if app:
                app.setWindowIcon(app_icon)
                
            # Pro Windows - explicitn√≠ nastaven√≠ pro v≈°echna okna
            if hasattr(app, 'setWindowIcon'):
                QApplication.setWindowIcon(app_icon)
            
            # System tray ikona...
            if QSystemTrayIcon.isSystemTrayAvailable():
                self.tray_icon = QSystemTrayIcon(app_icon, self)
                
                # Vytvo≈ôen√≠ kontextov√©ho menu pro syst√©movou li≈°tu
                tray_menu = QMenu()
                
                # Akce pro zobrazen√≠/skryt√≠ okna
                show_action = tray_menu.addAction("Zobrazit")
                show_action.triggered.connect(self.show)
                
                hide_action = tray_menu.addAction("Skr√Ωt")
                hide_action.triggered.connect(self.hide)
                
                tray_menu.addSeparator()
                
                # Akce pro ukonƒçen√≠ aplikace
                quit_action = tray_menu.addAction("Ukonƒçit")
                quit_action.triggered.connect(QApplication.instance().quit)
                
                self.tray_icon.setContextMenu(tray_menu)
                
                # Zobrazen√≠ ikony v syst√©mov√© li≈°tƒõ
                self.tray_icon.show()
                
                # Tooltip pro ikonu v syst√©mov√© li≈°tƒõ
                self.tray_icon.setToolTip("Veterin√°rn√≠ rezervaƒçn√≠ syst√©m")
                
                # Reakce na kliknut√≠ na ikonu (zobraz√≠/skryje okno)
                self.tray_icon.activated.connect(self.tray_icon_activated)
                print("‚úÖ System tray ikona nastavena")
            else:
                print("‚ö†Ô∏è Syst√©mov√° li≈°ta nen√≠ dostupn√°")
                self.tray_icon = None
        else:
            print(f"‚ùå Nepoda≈ôilo se naƒç√≠st ≈æ√°dnou ikonu")
            self.tray_icon = None
            
    def tray_icon_activated(self, reason):
        """Obsluha kliknut√≠ na ikonu v syst√©mov√© li≈°tƒõ."""
        if reason == QSystemTrayIcon.DoubleClick:
            # Dvojklik - zobraz√≠/skryje okno
            if self.isVisible():
                self.hide()
            else:
                self.show()
                self.raise_()
                self.activateWindow()
        elif reason == QSystemTrayIcon.Trigger:
            # Jednoduch√© kliknut√≠ - zobraz√≠ okno
            if not self.isVisible():
                self.show()
                self.raise_()
                self.activateWindow()

    def resizeEvent(self, event):
        """Obsluha zmƒõny velikosti okna - aplikuj responzivn√≠ v√Ω≈°ku ≈ô√°dk≈Ø"""
        super().resizeEvent(event)
        
        # Delay pro lep≈°√≠ v√Ωkon - aplikuj zmƒõny a≈æ po dokonƒçen√≠ resizingu
        if hasattr(self, 'resize_timer'):
            self.resize_timer.stop()
        
        from PySide6.QtCore import QTimer
        self.resize_timer = QTimer()
        self.resize_timer.timeout.connect(self.apply_optimal_row_height)
        self.resize_timer.setSingleShot(True)
        self.resize_timer.start(100)  # 100ms delay
        
        print(f"üñ•Ô∏è Okno zmƒõnƒõno na: {self.width()}x{self.height()}px")

    def closeEvent(self, event):
        """Obsluha zav≈ôen√≠ aplikace"""
        print("üî¥ Zav√≠r√°m hlavn√≠ okno a v≈°echna podokna...")
        
        # Zastaven√≠ auto-refresh timeru
        if hasattr(self, 'refresh_timer'):
            self.refresh_timer.stop()
        
        # Zastavit database listener
        if hasattr(self, 'db_listener') and self.db_listener:
            try:
                self.db_listener.stop()
                self.db_listener = None
            except Exception as e:
                print(f"Chyba p≈ôi zastavov√°n√≠ database listeneru: {e}")
        
        # Zav≈ôi chat pokud je inicializov√°n
        if self.chat_initialized and self.chat:
            try:
                self.chat.close()
            except Exception as e:
                print(f"Chyba p≈ôi zav√≠r√°n√≠ chatu: {e}")
        
        # Zav≈ôi v≈°echna registrovan√° podokna (dialogy)
        dialogs_to_close = self.open_dialogs.copy()  # Kopie seznamu
        for dialog in dialogs_to_close:
            try:
                if dialog and hasattr(dialog, 'close'):
                    print(f"üî¥ Zav√≠r√°m registrovan√Ω dialog: {dialog.__class__.__name__}")
                    dialog.close()
                    # Pro QWidget tak√© zajist√≠me, ≈æe se sma≈æe
                    if hasattr(dialog, 'deleteLater'):
                        dialog.deleteLater()
            except Exception as e:
                print(f"Chyba p≈ôi zav√≠r√°n√≠ dialogu {dialog}: {e}")
        
        # Vyƒçist√≠me seznam
        self.open_dialogs.clear()
        
        # Zav≈ôi v≈°echna otev≈ôen√° podokna (dialogy) - agresivn√≠ fallback
        try:
            app = QApplication.instance()
            if app:
                print("üî¥ Zav√≠r√°m v≈°echny widgety aplikace...")
                # Zav≈ôi v≈°echny top-level widgety kromƒõ hlavn√≠ho okna
                for widget in app.topLevelWidgets():
                    if widget != self and widget.isVisible():
                        try:
                            print(f"üî¥ Zav√≠r√°m top-level widget: {widget.__class__.__name__}")
                            widget.close()
                            # Zajist√≠me, ≈æe se widget sma≈æe
                            if hasattr(widget, 'deleteLater'):
                                widget.deleteLater()
                        except Exception as e:
                            print(f"Chyba p≈ôi zav√≠r√°n√≠ widgetu {widget}: {e}")
                
                # Forceuj ukonƒçen√≠ aplikace
                print("üî¥ Ukonƒçuji aplikaci...")
                app.closeAllWindows()  # Zav≈ôe v≈°echna okna
                app.quit()
                
                # Pokud aplikace st√°le bƒõ≈æ√≠, pou≈æij exit
                import sys
                sys.exit(0)
                
        except Exception as e:
            print(f"Chyba p≈ôi zav√≠r√°n√≠ aplikace: {e}")
            # Posledn√≠ mo≈ænost - tvrd√© ukonƒçen√≠
            import sys
            sys.exit(1)
        
        print("‚úÖ Aplikace byla √∫spƒõ≈°nƒõ ukonƒçena")
        event.accept()

    def register_dialog(self, dialog):
        """Zaregistruje dialog pro sledov√°n√≠ a automatick√© zav≈ôen√≠"""
        if dialog not in self.open_dialogs:
            self.open_dialogs.append(dialog)
            # P≈ôipoj√≠me sign√°l pro automatick√© odregistrov√°n√≠ p≈ôi zav≈ôen√≠
            # QDialog m√° finished sign√°l, QWidget m√° pouze destroyed
            if hasattr(dialog, 'finished'):
                dialog.finished.connect(lambda: self.unregister_dialog(dialog))
            else:
                # Pro QWidget pou≈æijeme destroyed sign√°l
                dialog.destroyed.connect(lambda: self.unregister_dialog(dialog))
    
    def unregister_dialog(self, dialog):
        """Odregistruje dialog ze sledov√°n√≠"""
        if dialog in self.open_dialogs:
            self.open_dialogs.remove(dialog)
    
    def center_dialog_on_screen(self, dialog):
        """Vycentruje dialog uprost≈ôed obrazovky"""
        # Z√≠skej rozmƒõry obrazovky
        screen = QApplication.primaryScreen()
        screen_geometry = screen.availableGeometry()
        
        # Z√≠skej rozmƒõry dialogu
        dialog_size = dialog.sizeHint()
        if dialog_size.isEmpty():
            dialog_size = dialog.size()
        
        # Vypoƒç√≠tej pozici pro centrov√°n√≠
        x = (screen_geometry.width() - dialog_size.width()) // 2
        y = (screen_geometry.height() - dialog_size.height()) // 2
        
        # Nastav pozici dialogu
        dialog.move(x, y)

    def destroy_chat(self):
        """Kompletnƒõ zniƒç√≠ chat widget a resetuje stav"""
        if self.chat_initialized and self.chat:
            try:
                # Odebere chat z layoutu
                if self.ordinace_layout.indexOf(self.chat) != -1:
                    self.ordinace_layout.removeWidget(self.chat)
                
                # Zav≈ôe a sma≈æe chat widget
                self.chat.close()
                self.chat.deleteLater()
                self.chat = None
                self.chat_initialized = False
                
                # Od≈°krtne checkbox
                if "Chat" in self.checkboxy:
                    self.checkboxy["Chat"].setChecked(False)
                
                # Aktualizuje layout spacer
                self.update_layout_spacer()
                
            except Exception as e:
                print(f"Chyba p≈ôi niƒçen√≠ chatu: {e}")

    def reset_chat(self):
        """Resetuje chat - u≈æiteƒçn√© pro zmƒõnu konfigurace"""
        self.destroy_chat()
        # Chat bude znovu inicializov√°n p≈ôi dal≈°√≠m zapnut√≠ checkboxu

    def chat_checkbox_double_click(self, event):
        """Obsluha dvojkliku na chat checkbox - otev≈ôe konfiguraci"""
        self.show_chat_config()
        # Zabr√°n√≠ standardn√≠mu chov√°n√≠ checkboxu
        event.accept()

    def setup_auto_refresh(self):
        """Nastav√≠ automatick√© obnovov√°n√≠ dat pro synchronizaci v√≠ce instanc√≠."""
        # Timer pro automatick√© obnoven√≠ ka≈æd√Ωch 30 sekund
        self.refresh_timer = QTimer()
        self.refresh_timer.timeout.connect(self.auto_refresh_data)
        self.refresh_timer.start(30000)  # 30 sekund
        
        # Kl√°vesov√° zkratka F5 pro manu√°ln√≠ obnoven√≠
        refresh_shortcut = QShortcut(QKeySequence("F5"), self)
        refresh_shortcut.activated.connect(self.manual_refresh_data)
        
        # Kl√°vesov√° zkratka Ctrl+R pro rychl√© manu√°ln√≠ obnoven√≠
        refresh_shortcut_ctrl = QShortcut(QKeySequence("Ctrl+R"), self)
        refresh_shortcut_ctrl.activated.connect(self.manual_refresh_data)
        
        print("üîÑ Auto-refresh nastaven (30s interval, F5/Ctrl+R pro manu√°ln√≠)")

    def auto_refresh_data(self):
        """Automatick√© obnoven√≠ dat."""
        try:
            # P≈ôeskoƒçit auto-refresh pokud prob√≠h√° pl√°nov√°n√≠ ordinaƒçn√≠ch ƒças≈Ø
            if self.is_planning_active:
                print("‚è∏Ô∏è Auto-refresh pozastaven - prob√≠h√° pl√°nov√°n√≠ ordinaƒçn√≠ch ƒças≈Ø")
                return
                
            print("üîÑ Auto-refresh dat...")
            self.nacti_rezervace()
            # Pouze p≈ôi pot≈ôebƒõ aktualizovat i ostatn√≠ komponenty:
            # self.aktualizuj_doktori_layout()
            # self.aktualizuj_tabulku_ordinaci_layout()
        except Exception as e:
            print(f"‚ö†Ô∏è Chyba p≈ôi auto-refresh: {e}")

    def manual_refresh_data(self):
        """Manu√°ln√≠ obnoven√≠ dat (F5 nebo Ctrl+R)."""
        try:
            print("üîÑ Manu√°ln√≠ refresh dat (F5/Ctrl+R)...")
            self.nacti_rezervace()
            self.aktualizuj_doktori_layout()
            self.aktualizuj_tabulku_ordinaci_layout()
            
            # Zobraz kr√°tk√© potvrzen√≠
            if hasattr(self, 'status_bar'):
                self.status_bar.showMessage("‚úÖ Data obnovena", 2000)
        except Exception as e:
            print(f"‚ö†Ô∏è Chyba p≈ôi manu√°ln√≠m refresh: {e}")
            if hasattr(self, 'status_bar'):
                self.status_bar.showMessage(f"‚ùå Chyba p≈ôi obnoven√≠: {e}", 5000)

    def setup_database_listeners(self):
        """Nastav√≠ poslouch√°n√≠ database notifikac√≠."""
        try:
            from models.database_listener import DatabaseListener
            
            self.db_listener = DatabaseListener()
            
            # P≈ôipoj sign√°ly pro r≈Øzn√© typy zmƒõn
            self.db_listener.reservation_changed.connect(self.on_reservation_changed)
            self.db_listener.doctor_changed.connect(self.on_doctor_changed)
            self.db_listener.ordinace_changed.connect(self.on_ordinace_changed)
            
            # Spus≈• listener pro v≈°echny typy zmƒõn
            self.db_listener.start_listening(['reservation_changes', 'doctor_changes', 'ordinace_changes'])
            
            print("‚úÖ Database listener nastaven pro rezervace, doktory a ordinace")
        except Exception as e:
            print(f"‚ö†Ô∏è Database listener nedostupn√Ω: {e}")
            self.db_listener = None

    def on_reservation_changed(self, data):
        """Reakce na zmƒõnu rezervace v datab√°zi."""
        try:
            print(f"üîÑ Zmƒõna rezervace detekov√°na: {data}")
            
            # Aktualizuj rezervace
            self.nacti_rezervace()
            
            # Zobraz notifikaci u≈æivateli
            operation = data.get('operation', 'UPDATE')
            if hasattr(self, 'status_bar'):
                if operation == 'INSERT':
                    self.status_bar.showMessage("üìÖ Byla p≈ôid√°na nov√° rezervace", 3000)
                elif operation == 'UPDATE':
                    self.status_bar.showMessage("üîß Rezervace byla aktualizov√°na", 3000)
                elif operation == 'DELETE':
                    self.status_bar.showMessage("‚ùå Rezervace byla smaz√°na", 3000)
                    
        except Exception as e:
            print(f"‚ö†Ô∏è Chyba p≈ôi zpracov√°n√≠ zmƒõny rezervace: {e}")

    def on_doctor_changed(self, data):
        """Reakce na zmƒõnu doktora v datab√°zi."""
        try:
            print(f"üîÑ Zmƒõna doktora detekov√°na: {data}")
            
            # Aktualizuj layout doktor≈Ø
            self.aktualizuj_doktori_layout()
            
            # Aktualizuj rezervace (mohou obsahovat jm√©na doktor≈Ø)
            self.nacti_rezervace()
            
            # Zobraz notifikaci u≈æivateli
            operation = data.get('operation', 'UPDATE')
            if hasattr(self, 'status_bar'):
                if operation == 'UPDATE':
                    self.status_bar.showMessage("üë®‚Äç‚öïÔ∏è Informace o doktorovi byly aktualizov√°ny", 3000)
                elif operation == 'DEACTIVATE':
                    self.status_bar.showMessage("‚ö†Ô∏è Doktor byl deaktivov√°n", 3000)
                elif operation == 'DELETE':
                    self.status_bar.showMessage("‚ùå Doktor byl odstranƒõn", 3000)
                    
        except Exception as e:
            print(f"‚ö†Ô∏è Chyba p≈ôi zpracov√°n√≠ zmƒõny doktora: {e}")

    def on_ordinace_changed(self, data):
        """Reakce na zmƒõnu ordinace v datab√°zi."""
        try:
            print(f"üîÑ Zmƒõna ordinace detekov√°na: {data}")
            
            operation = data.get('operation', 'UPDATE')
            nazev = data.get('data', {}).get('nazev', 'nezn√°m√°')
            
            # Aktualizuj layout ordinac√≠
            self.aktualizuj_tabulku_ordinaci_layout()
            
            # Aktualizuj rezervace (mohou obsahovat n√°zvy ordinac√≠)
            self.nacti_rezervace()
            
            # Zobraz notifikaci u≈æivateli
            if hasattr(self, 'status_bar'):
                if operation == 'INSERT':
                    self.status_bar.showMessage(f"üè• Byla p≈ôid√°na nov√° ordinace: {nazev}", 3000)
                elif operation == 'UPDATE':
                    self.status_bar.showMessage(f"üîß Ordinace {nazev} byla aktualizov√°na", 3000)
                elif operation == 'DELETE':
                    self.status_bar.showMessage(f"‚ùå Ordinace {nazev} byla odstranƒõna", 3000)
                    
        except Exception as e:
            print(f"‚ö†Ô∏è Chyba p≈ôi zpracov√°n√≠ zmƒõny ordinace: {e}")

    def closeEvent(self, event):
        """Obsluha zav≈ôen√≠ aplikace"""
        # Zastavit database listener
        if hasattr(self, 'db_listener') and self.db_listener:
            try:
                self.db_listener.stop_listening()
                print("‚úÖ Database listener zastaven")
            except Exception as e:
                print(f"‚ö†Ô∏è Chyba p≈ôi zastavov√°n√≠ database listeneru: {e}")
        
        # Zastavit timery
        if hasattr(self, 'refresh_timer') and self.refresh_timer:
            self.refresh_timer.stop()
        
        event.accept()

    def sync_table_scrolling(self, source_mistnost, value):
        """Synchronizuje scrollov√°n√≠ v≈°ech tabulek s ordinacemi."""
        # Pou≈æijeme flag pro zabr√°nƒõn√≠ rekurzi m√≠sto odpojov√°n√≠ sign√°l≈Ø
        if hasattr(self, '_syncing_scroll') and self._syncing_scroll:
            return
            
        self._syncing_scroll = True
        
        try:
            for mistnost, tabulka in self.tabulky.items():
                if mistnost != source_mistnost:
                    scrollbar = tabulka.verticalScrollBar()
                    # Nastav√≠me stejnou pozici scrollbaru bez odpojov√°n√≠ sign√°l≈Ø
                    scrollbar.setValue(value)
        finally:
            self._syncing_scroll = False